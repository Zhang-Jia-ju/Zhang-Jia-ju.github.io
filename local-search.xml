<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/06/26/%E5%AF%B9%E6%95%B0%E5%87%A0%E7%8E%87%E5%9B%9E%E5%BD%92/"/>
    <url>/2022/06/26/%E5%AF%B9%E6%95%B0%E5%87%A0%E7%8E%87%E5%9B%9E%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h2 id="广义线性模型generalized-linear-model">广义线性模型（Generalizedlinear model）</h2><p>设<span class="math inline">\(y=\hat{w}^{T}\cdot\hat{x},where\,\hat{w}=(w_1,w_2,\dots,w_n,b)^{T}\,\hat{x}=(x_1,x_2,\dots,x_n,1)^{T}\)</span>,令<spanclass="math inline">\(g(y)=\hat{w}^{T}\cdot\hat{x}\)</span>，其中<spanclass="math inline">\(y=g(x)\)</span>为连续可微函数。则该模型为广义线性模型，该模型的提出是为了解决线性模型由于简单而带有的局限性。若令<spanclass="math inline">\(y=g(x)=ln(x)\)</span>，则该模型可表示为<spanclass="math inline">\(ln(y)=\hat{w}^{T}\cdot\hat{x} \iffy=\exp(\hat{w}^{T}\cdot\hat{x})\)</span>，该模型被称为对数线性模型(logistlinear model).</p><h2 id="对数几率模型与逻辑回归">对数几率模型与逻辑回归</h2><ul><li>几率(odd)</li></ul><p>几率不是概率，而是一个事件发生与不发生的概率的比值。假设某事件A发生的概率为p，则该事件不发生的概率为1-p，该事件的几率为：<spanclass="math inline">\(odd(A)=\frac{p}{1-p}\)</span>.在几率的基础上取（自然底数的）对数，则构成该事件的对数几率（logit）：<spanclass="math inline">\(logit(A)=\ln\frac{p}{1-p}\)</span></p><ul><li>对数几率模型</li></ul><p>如果我们将对数几率看成是一个函数，并将其作为联系函数，即<spanclass="math inline">\(g(y)=\ln\frac{y}{1-y}\)</span>.则该广义线性模型为：<span class="math display">\[\ln\frac{y}{1-y}=\hat{w}^{T}\cdot\hat{x} \iffy=\frac{1}{1+\exp(-\hat{w}^{T}\cdot\hat{x})}\quadwhere\,y=\frac{1}{1+exp(-z)}被称为Sigmoid函数\]</span></p><ul><li>Sigmoid函数及其导数</li></ul><p><spanclass="math inline">\(Sigmoid(x)=\frac{1}{1+\exp(-x)},Sigmoid^{\prime}(x)=(1-Sigmoid(x))Sigmoid(x)\)</span>，其图像如下：</p><p><img src="G:\截图\QQ截图20220624122721.png" /></p><h2id="逻辑回归模型输出结果与模型可解释性">逻辑回归模型输出结果与模型可解释性</h2><ul><li>连续型输出结果转化为分类预测结果</li></ul><p>对于逻辑回归输出的(0,1)之间的连续型数值，我们只需要确定一个“阈值”，就可以将其转化为二分类的类别判别结果。通常来说，这个阈值是0.5，即以0.5为界，调整模型输出结果：<span class="math display">\[\begin{equation}y_{cla}=\left\{\begin{aligned}0, y&lt;0.5 \\1, y≥0.5\end{aligned}\right.\end{equation}\]</span> 而有时候逻辑回归当<spanclass="math inline">\(f1\_score\)</span>等作为分类评价指标可以将阈值进行调整。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#借助sklearn中的Logisticregression来构建带有阈值移动的评估器</span><br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br><span class="hljs-keyword">from</span> sklearn.base <span class="hljs-keyword">import</span> BaseEstimator,TransformerMixin<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">logistic_threshold</span>(BaseEstimator,TransformerMixin):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,penalty=<span class="hljs-string">&quot;l2&quot;</span>,C=<span class="hljs-number">1.0</span>,solver=<span class="hljs-string">&quot;lbfgs&quot;</span>,max_iter=<span class="hljs-built_in">int</span>(<span class="hljs-params"><span class="hljs-number">1e8</span></span>),l1_ratio=<span class="hljs-literal">None</span>,class_weight=<span class="hljs-literal">None</span>,thr=<span class="hljs-number">0.5</span></span>):<br>        self.penalty = penalty<br>        self.C = C<br>        self.solver = solver<br>        self.max_iter = max_iter<br>        self.l1_ratio = l1_ratio<br>        self.class_weight = class_weight<br>        self.thr = thr<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fit</span>(<span class="hljs-params">self,X,y</span>):<br>        clf =      LogisticRegression(slef.penalty,self.C,self.solver,self.max_iter,self.l1_ratio,self.class_weight).fit(X,y)<br>        self.coef_ = clf.coef_<br>        self.clf = clf<br>        <span class="hljs-keyword">return</span> self<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self,X</span>):<br>        res = (self.clf.predict_proba(X)[:,<span class="hljs-number">1</span>]&gt;self.thr)*<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><ul><li>逻辑回归输出结果(y)是否是概率</li></ul><p>决定y是否是概率的核心因素，不是模型本身，而是建模流程。  逻辑斯蒂本身也有对应的概率分布，因此输入的自变量其实是可以视作随机变量的，但前提是需要满足一定的分布要求。如果逻辑回归的建模流程遵照数理统计方法的一般建模流程，即自变量的分布（或者转化之后的分布）满足一定要求（通过检验），则最终模型输出结果就是严格意义上的概率取值。而如果是遵照机器学习建模流程进行建模，在为对自变量进行假设检验下进行模型构建，则由于自变量分布不一定满足条件，因此输出结果不一定为严格意义上的概率。</p><p>而我们基本都采用机器学习建模流程进行逻辑回归的构建，因此对于模型输出结果y，其实并不一定是严格意义上的概率。不过在目前大多数使用场景中，由于大家希望能够用到模型本身的可解释性，因此还是会将模型结果解读为1发生的概率。尽管这并不是一个严谨的做法，但在机器学习整体的“实证”倾向下，只要业务方接受这种做法、并且能够一定程度指导业务，我们就可以将其解读为概率。我们将逻辑回归输出结果看成近似概率值。</p><h2 id="sklearn中的逻辑回归">sklearn中的逻辑回归</h2><ul><li>正则化(Regularization)</li></ul><p><img src="G:\截图\QQ截图20220624131440.png" /></p><p>上述为sklearn官方解释可以看出sklearn中是默认进行正则化，每个式子的前面部分为结构风险项（正则化项）,后面部分为损失函数经验风险项。当我们不想进行正则化的时候可以控制C很大。</p><table><thead><tr class="header"><th>参数</th><th>解释</th></tr></thead><tbody><tr class="odd"><td>penalty</td><td>正则化项</td></tr><tr class="even"><td>dual</td><td>是否求解对偶问题*</td></tr><tr class="odd"><td>tol</td><td>迭代停止条件：两轮迭代损失值差值小于tol时，停止迭代</td></tr><tr class="even"><td>C</td><td>经验风险和结构风险在损失函数中的权重</td></tr><tr class="odd"><td>fit_intercept</td><td>线性方程中是否包含截距项</td></tr><tr class="even"><td>intercept_scaling</td><td>相当于此前讨论的特征最后一列全为1的列，当使用liblinear求解参数时用于捕获截距</td></tr><tr class="odd"><td>class_weight</td><td>各类样本权重*</td></tr><tr class="even"><td>random_state</td><td>随机数种子</td></tr><tr class="odd"><td>solver</td><td>损失函数求解方法*</td></tr><tr class="even"><td>max_iter</td><td>求解参数时最大迭代次数，迭代过程满足max_iter或tol其一即停止迭代</td></tr><tr class="odd"><td>multi_class</td><td>多分类问题时求解方法*</td></tr><tr class="even"><td>verbose</td><td>是否输出任务进程</td></tr><tr class="odd"><td>warm_start</td><td>是否使用上次训练结果作为本次运行初始参数</td></tr><tr class="even"><td>l1_ratio</td><td>当采用弹性网正则化时，<spanclass="math inline">\(l1\)</span>正则项权重，就是损失函数中的<spanclass="math inline">\(\rho\)</span></td></tr></tbody></table><ul><li>dual：是否求解对偶问题</li></ul><p>  对偶问题是约束条件相反、求解方向也相反的问题，当数据集过小而特征较多时，求解对偶问题能一定程度降低运算复杂度，其他情况建议保留默认参数取值。</p><ul><li>class_weight:各类样本权重</li></ul><p>  class_weight其实代表各类样本在进行损失函数计算时的数值权重，例如假设一个二分类问题，0、1两类的样本比例是2:1，此时可以输入一个字典类型对象用于说明两类样本在进行损失值计算时的权重，例如输入:{0:1,1:3}，则代表1类样本的每一条数据在进行损失函数值的计算时都会在原始数值上*3。而当我们将该参数选为<code>balanced</code>时，则会自动将这个比例调整为真实样本比例的反比，以达到平衡的效果。</p><ul><li>solver：损失函数求解方法</li></ul><p>  其实除了最小二乘法和梯度下降以外，还有非常多的关于损失函数的求解方法，而选择损失函数的参数，就是solver参数。</p><p>  而当前损失函数到底采用何种优化方法进行求解，其实最终目的是希望能够更快（计算效率更高）更好（准确性更高）的来进行求解，而硬性的约束条件是损失函数的形态，此外则是用户自行选择的空间。下面为官方给出的solver列表</p><p><img src="G:\截图\QQ截图20220624131953.png" /></p><ul><li>multi_class：选用何种方法进行多分类问题求解</li></ul><p>可选OVR和MVM，当然默认情况是auto，此时模型会优先根据惩罚项和solver选择OVR还是MVM，但一般来说，MVM效果会好于OVR。</p><h2 id="利用极大似然估计进行参数估计">利用极大似然估计进行参数估计</h2><p>逻辑回归模型如下： <span class="math display">\[y = \frac{1}{1+\exp(-\hat{w}^{T}\cdot\hat{x})}\quad\hat{w}^{T}=(w_1,w_2,\dots,w_n,b)^{T}\,,\hat{x}=(x_1,x_2,\dots,x_n,1)^{T}\\固定一组\hat{w}^{T}和\hat{x}得:\quadp(y=1\vert\hat{w}^{T},\hat{x}) =\frac{1}{1+\exp(-\hat{w}^{T}\cdot\hat{x})}\\\phantom{固定一组\hat{w}^{T}和\hat{x}得:::::}p(y=1\vert\hat{w}^{T},\hat{x})= \frac{1}{1+\exp(-\hat{w}^{T}\cdot\hat{x})}\\\]</span> 令<spanclass="math inline">\(p_1(\hat{w}^{T},\hat{x})=p(y=1\vert\hat{w}^{T},\hat{x}),p_0(\hat{w}^{T},\hat{x})=p(y=0\vert\hat{w}^{T},\hat{x})\)</span>得：<spanclass="math inline">\(p(y=y_i)=p_1^{y_i}(\hat{w}^{T},\hat{x})\cdotp_0^{1-y_i}(\hat{w}^{T},\hat{x})\)</span></p><p>则似然函数为<spanclass="math inline">\(L(y_i;\hat{w}^{T},\hat{x})=\prod_{i=1}^{n}p(y=y_i)=\prod_{i=1}^{n}p_1^{y_i}(\hat{w}^{T},\hat{x})\cdotp_0^{1-y_i}(\hat{w}^{T},\hat{x})\)</span></p><p>进而<span class="math inline">\(\ln L=\sum_{i=1}^{n}(\lnp_1^{y_i}(\hat{w}^{T},\hat{x})+\lnp_0^{1-y_i}(\hat{w}^{T},\hat{x}))=\sum_{i=1}^{n}(y_i\lnp_1(\hat{w}^{T},\hat{x})+(1-y_i)\lnp_0(\hat{w}^{T},\hat{x}))\)</span></p><p>通过一系列数学过程可以证明，通过极大似然估计构建的损失函数是凸函数，此时我们可以采用导数为0联立方程组的方式进行求解，这也是极大似然估计对参数求解的一般方法。但这种方法会涉及大量的导数运算、方程组求解等，并不适用于大规模甚至是超大规模数值运算，因此，在机器学习领域，我们通常会采用一些更加通用的优化方法对逻辑回归的损失函数进行求解，通常来说是牛顿法或者梯度下降算法，其中，梯度下降算法是机器学习中最为通用的求解损失函数的优化算法.</p><p>为了方便求最小值将其转化为: <span class="math display">\[\ln L=-\sum_{i=1}^{n}(y_i\ln p_1(\hat{w}^{T},\hat{x})+(1-y_i)\lnp_0(\hat{w}^{T},\hat{x}))\]</span></p><h2 id="熵相对熵与交叉熵">熵、相对熵与交叉熵</h2><p>###熵</p><p>通常我们用熵（entropy）来表示随机变量不确定性的度量，或者说系统混乱程度、信息混乱程度。熵的计算公式如下：<span class="math display">\[entrop(X) = -\sum_{i=1}^{n}p(x_i)log(x_i)\]</span>可以证明，熵的计算结果在[0,1]之间，并且熵值越大，系统越混乱、信息越混乱。</p><h3 id="相对熵和交叉熵">相对熵和交叉熵</h3><p>相对熵也被称为Kullback-Leibler散度（KL散度）或者信息散度（informationdivergence）。通常用来衡量两个随机变量分布的差异性。假设对同一个随机变量X，有两个单独的概率分布P(x)和Q(x)，当X是离散变量时，我们可以通过如下相对熵计算公式来衡量二者差异：<span class="math display">\[D_{KL}(P\vert\vert Q) = \sum_{i=1}^{n}P(x_i)log(\frac{P(x_i)}{Q(x_i)})\]</span> 和信息熵类似，相对熵越小，代表Q(x)和P(x)越接近。</p><p>从交叉熵的计算公式不难看出，这其实是一种非对称性度量，也就是<spanclass="math inline">\(D_{KL}(P\vert\vert Q)\ne D_{KL}(Q\vert\vertP)\)</span>。从本质上来说，相对熵刻画的是用概率分布Q来刻画概率分布P的困难程度，而在机器学习领域，我们一般令Q为模型输出结果，而P为数据集标签真实结果，以此来判断模型输出结果是否足够接近真实情况。</p><ul><li>Q为拟合分布P为真实分布，也被称为前向KL散度（forward KLdivergence）。</li></ul><p><span class="math display">\[\begin{split}D_{KL}(P\vert\vert Q) &amp;=\sum_{i=1}^{n}P(x_i)log(\frac{P(x_i)}{Q(x_i)})\\&amp;=\sum_{i=1}^{n}P(x_i)log(P(x_i))-\sum_{i=1}^{n}P(x_i)log(Q(x_i))\\&amp;=-entropy(P(X))+cross\_entropy(P,Q)\end{split}\]</span></p><p>对于给定数据集，其信息熵是确定的。因此，如果我们希望P、Q二者分布尽可能接近，我们就需要尽可能减少相对熵，但由于相对熵=交叉熵-信息熵，因此我们只能力求减少交叉熵。当然，也正因如此，交叉熵可以作为衡量模型输出分布是否接近真实分布的重要度量方法。</p><p>简单总结上述过程要点：</p><ul><li>我们用相对熵<spanclass="math inline">\(𝐷_{𝐾𝐿}(𝑃||𝑄)\,D_{KL}(P||Q)\)</span>来表示模型拟合分布Q和数据真实分布P之间的差距，相对熵越小拟合效果越好；</li><li>根据计算公式(6),相对熵=交叉熵-信息熵；</li><li>对于给定数据集，信息熵是确定的，因此我们只能通过尽可能减小交叉熵来降低相对熵；</li></ul><p>根据吉布斯不等式，相对熵的取值恒大于等于零，当预测分布和真实分布完全一致时相对熵取值为0，此时交叉熵等于数据信息熵，此外只要二者分布不一致，交叉熵的取值都将大于信息熵。</p><h3 id="二分类交叉熵损失函数">二分类交叉熵损失函数</h3><p><span class="math display">\[binaryCE(\hat{w}) =-\sum_{i=1}^{n}(y_ilog(p_1(\hat{w}^{T},\hat{x}))+(1-y_i)log(p_0(\hat{w}^{T},\hat{x})))\]</span></p><h2 id="逻辑回归应用">逻辑回归应用</h2><p>该数据集为Telco Customer Churn 电信用户流失预测案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br>sns.set_theme(style=<span class="hljs-string">&quot;darkgrid&quot;</span>)<span class="hljs-comment">#用来设置主题背景</span><br>plt.rcParams[<span class="hljs-string">&quot;font.sans-serif&quot;</span>] = [<span class="hljs-string">&quot;SimHei&quot;</span>] <span class="hljs-comment">#用来正常显示中文标签</span><br>plt.rcParams[<span class="hljs-string">&quot;axes.unicode_minus&quot;</span>] = <span class="hljs-literal">False</span> <span class="hljs-comment">#用来正常显示负号</span><br><span class="hljs-comment"># Read data</span><br>tcc = pd.read_csv(<span class="hljs-string">&#x27;WA_Fn-UseC_-Telco-Customer-Churn.csv&#x27;</span>)<br><span class="hljs-comment"># 标注连续/离散字段</span><br><span class="hljs-comment"># 离散字段</span><br>category_cols = [<span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-string">&#x27;SeniorCitizen&#x27;</span>, <span class="hljs-string">&#x27;Partner&#x27;</span>, <span class="hljs-string">&#x27;Dependents&#x27;</span>,<br>               <span class="hljs-string">&#x27;PhoneService&#x27;</span>, <span class="hljs-string">&#x27;MultipleLines&#x27;</span>, <span class="hljs-string">&#x27;InternetService&#x27;</span>, <span class="hljs-string">&#x27;OnlineSecurity&#x27;</span>, <span class="hljs-string">&#x27;OnlineBackup&#x27;</span>, <br>                <span class="hljs-string">&#x27;DeviceProtection&#x27;</span>, <span class="hljs-string">&#x27;TechSupport&#x27;</span>, <span class="hljs-string">&#x27;StreamingTV&#x27;</span>, <span class="hljs-string">&#x27;StreamingMovies&#x27;</span>, <span class="hljs-string">&#x27;Contract&#x27;</span>, <span class="hljs-string">&#x27;PaperlessBilling&#x27;</span>,<br>                <span class="hljs-string">&#x27;PaymentMethod&#x27;</span>]<br><br><span class="hljs-comment"># 连续字段</span><br>numeric_cols = [<span class="hljs-string">&#x27;tenure&#x27;</span>, <span class="hljs-string">&#x27;MonthlyCharges&#x27;</span>, <span class="hljs-string">&#x27;TotalCharges&#x27;</span>]<br><br><span class="hljs-comment"># 标签</span><br>target = <span class="hljs-string">&#x27;Churn&#x27;</span><br><br><span class="hljs-comment"># ID列</span><br>ID_col = <span class="hljs-string">&#x27;customerID&#x27;</span><br><br><span class="hljs-comment"># 验证是否划分能完全</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(category_cols) + <span class="hljs-built_in">len</span>(numeric_cols) + <span class="hljs-number">2</span> == tcc.shape[<span class="hljs-number">1</span>]<br><span class="hljs-comment">#Verify whether the ID column is duplicate</span><br>tcc[ID_col].nunique() == tcc.shape[<span class="hljs-number">0</span>]<br><span class="hljs-comment">#Verify whether have the explict missing values</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">missing</span>(<span class="hljs-params">df</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Caculate the proportion of the missing value</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    missing_number = df.isnull().<span class="hljs-built_in">sum</span>().sort_values(ascending=<span class="hljs-literal">False</span>) <span class="hljs-comment">#decending</span><br>    missing_per = (df.isnull().<span class="hljs-built_in">sum</span>()/df.count()).sort_values(ascending=<span class="hljs-literal">False</span>) <span class="hljs-comment">#decending</span><br>    missing_df = pd.concat([missing_number,missing_per],axis=<span class="hljs-number">1</span>,keys=[<span class="hljs-string">&quot;Missing_number&quot;</span>,<span class="hljs-string">&quot;Missing_per&quot;</span>])<br>    <span class="hljs-keyword">return</span> missing_df<br><span class="hljs-comment">#Verify whether have the discrete explict missing values</span><br><span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> category_cols:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(feature,tcc[feature].unique()))<br> <span class="hljs-comment">#Verify whether have the continuous explict missing values</span><br>tcc[numeric_cols].astype(<span class="hljs-built_in">float</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_index</span>(<span class="hljs-params">data_col,value</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Verify the first occurance of the given value in the given column,return -1 if there is none.</span><br><span class="hljs-string">    param data_col:given column</span><br><span class="hljs-string">    param value:given value</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    val_lst = [value]<br>    <span class="hljs-keyword">if</span> data_col.isin(val_lst).<span class="hljs-built_in">sum</span>() == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        res = data_col.isin(val_lst).idxmax()<br>    <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> numeric_cols:<br>    <span class="hljs-built_in">print</span>(find_index(tcc[feature],<span class="hljs-string">&quot; &quot;</span>))<br>tcc[<span class="hljs-string">&quot;TotalCharges&quot;</span>] = tcc[<span class="hljs-string">&quot;TotalCharges&quot;</span>].apply(<span class="hljs-keyword">lambda</span> x:x <span class="hljs-keyword">if</span> x!=<span class="hljs-string">&quot; &quot;</span><span class="hljs-keyword">else</span> np.nan).astype(<span class="hljs-built_in">float</span>)<br>tcc[<span class="hljs-string">&quot;MonthlyCharges&quot;</span>] = tcc[<span class="hljs-string">&quot;MonthlyCharges&quot;</span>].astype(<span class="hljs-built_in">float</span>)<br>tcc[<span class="hljs-string">&quot;TotalCharges&quot;</span>]=tcc[<span class="hljs-string">&quot;TotalCharges&quot;</span>].fillna(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#Outlier detection</span><br>plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">6</span>), dpi=<span class="hljs-number">200</span>)<br>plt.subplot(<span class="hljs-number">121</span>)<br>plt.boxplot(tcc[<span class="hljs-string">&#x27;MonthlyCharges&#x27;</span>])<br>plt.xlabel(<span class="hljs-string">&#x27;MonthlyCharges&#x27;</span>)<br>plt.subplot(<span class="hljs-number">122</span>)<br>plt.boxplot(tcc[<span class="hljs-string">&#x27;TotalCharges&#x27;</span>])<br>plt.xlabel(<span class="hljs-string">&#x27;TotalCharges&#x27;</span>)<br>tcc[target].replace(to_replace=<span class="hljs-string">&quot;Yes&quot;</span>,value=<span class="hljs-number">1</span>,inplace=<span class="hljs-literal">True</span>)<br>tcc[target].replace(to_replace=<span class="hljs-string">&quot;No&quot;</span>,value=<span class="hljs-number">0</span>,inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br>train,test = train_test_split(tcc,random_state=<span class="hljs-number">666</span>,test_size=<span class="hljs-number">0.3</span>)<br>X_train = train.drop(columns=[ID_col,target]).copy()<br>y_train = train[target].copy()<br>X_test = test.drop(columns=[ID_col,target]).copy()<br>y_test = test[target].copy()<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> OneHotEncoder,KBinsDiscretizer,StandardScaler<br><span class="hljs-keyword">from</span> sklearn.compose <span class="hljs-keyword">import</span> ColumnTransformer<br><span class="hljs-keyword">from</span> sklearn.pipeline <span class="hljs-keyword">import</span> make_pipeline<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCV<br>logistic_pre = ColumnTransformer([(<span class="hljs-string">&quot;cat&quot;</span>,OneHotEncoder(drop=<span class="hljs-string">&quot;if_binary&quot;</span>),category_cols),(<span class="hljs-string">&quot;num&quot;</span>,<span class="hljs-string">&quot;passthrough&quot;</span>,numeric_cols)])<br>logistic_model = LogisticRegression(max_iter=<span class="hljs-built_in">int</span>(<span class="hljs-number">1e8</span>))<br>logistic_pipe = make_pipeline(logistic_pre,logistic_model)<br>num_sel = [<span class="hljs-string">&quot;passthrough&quot;</span>,StandardScaler(),KBinsDiscretizer(n_bins=<span class="hljs-number">3</span>,encode=<span class="hljs-string">&quot;ordinal&quot;</span>,strategy=<span class="hljs-string">&quot;kmeans&quot;</span>)]<br>logistic_param = [&#123;<span class="hljs-string">&quot;columntransformer__num&quot;</span>:num_sel<br>                   ,<span class="hljs-string">&quot;logisticregression__penalty&quot;</span>:[<span class="hljs-string">&quot;l1&quot;</span>]<br>                   ,<span class="hljs-string">&quot;logisticregression__C&quot;</span>:np.arange(<span class="hljs-number">0.1</span>,<span class="hljs-number">2.1</span>,<span class="hljs-number">0.1</span>).tolist()<br>                   ,<span class="hljs-string">&quot;logisticregression__solver&quot;</span>:[<span class="hljs-string">&quot;saga&quot;</span>]&#125;<br>                 ,&#123;<span class="hljs-string">&quot;columntransformer__num&quot;</span>:num_sel<br>                   ,<span class="hljs-string">&quot;logisticregression__penalty&quot;</span>:[<span class="hljs-string">&quot;l2&quot;</span>]<br>                   ,<span class="hljs-string">&quot;logisticregression__C&quot;</span>:np.arange(<span class="hljs-number">0.1</span>,<span class="hljs-number">2.1</span>,<span class="hljs-number">0.1</span>).tolist()<br>                   ,<span class="hljs-string">&quot;logisticregression__solver&quot;</span>:[<span class="hljs-string">&#x27;lbfgs&#x27;</span>, <span class="hljs-string">&#x27;newton-cg&#x27;</span>, <span class="hljs-string">&#x27;sag&#x27;</span>, <span class="hljs-string">&#x27;saga&#x27;</span>]&#125;]<br>logistic_search = GridSearchCV(estimator=logistic_pipe,param_grid=logistic_param,n_jobs=-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">import</span> time<br>s = time.time()<br>logistic_search.fit(X_train,y_train)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(time.time()-s))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">logit_threshold</span>(BaseEstimator, TransformerMixin):<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, penalty=<span class="hljs-string">&#x27;l2&#x27;</span>, C=<span class="hljs-number">1.0</span>, max_iter=<span class="hljs-number">1e8</span>, solver=<span class="hljs-string">&#x27;lbfgs&#x27;</span>, l1_ratio=<span class="hljs-literal">None</span>, class_weight=<span class="hljs-literal">None</span>, thr=<span class="hljs-number">0.5</span></span>):<br>        self.penalty = penalty<br>        self.C = C<br>        self.max_iter = max_iter<br>        self.solver = solver<br>        self.l1_ratio = l1_ratio<br>        self.thr = thr<br>        self.class_weight = class_weight<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fit</span>(<span class="hljs-params">self, X, y</span>):<br>        clf = LogisticRegression(penalty = self.penalty, <br>                                 C = self.C, <br>                                 solver = self.solver, <br>                                 l1_ratio = self.l1_ratio,<br>                                 class_weight=self.class_weight, <br>                                 max_iter=self.max_iter)<br>        clf.fit(X, y)<br>        self.coef_ = clf.coef_<br>        self.clf = clf<br>        <span class="hljs-keyword">return</span> self<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, X</span>):<br>        res = (self.clf.predict_proba(X)[:, <span class="hljs-number">1</span>]&gt;=self.thr) * <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> res<br> <span class="hljs-comment"># 设置转化器流</span><br>logistic_pre = ColumnTransformer([<br>    (<span class="hljs-string">&#x27;cat&#x27;</span>, preprocessing.OneHotEncoder(drop=<span class="hljs-string">&#x27;if_binary&#x27;</span>), category_cols), <br>    (<span class="hljs-string">&#x27;num&#x27;</span>, <span class="hljs-string">&#x27;passthrough&#x27;</span>, numeric_cols)<br>])<br><br>num_pre = [<span class="hljs-string">&#x27;passthrough&#x27;</span>, preprocessing.StandardScaler(), preprocessing.KBinsDiscretizer(n_bins=<span class="hljs-number">3</span>, encode=<span class="hljs-string">&#x27;ordinal&#x27;</span>, strategy=<span class="hljs-string">&#x27;kmeans&#x27;</span>)]<br><br><span class="hljs-comment"># 实例化逻辑回归评估器</span><br>logistic_model = logit_threshold(max_iter=<span class="hljs-built_in">int</span>(<span class="hljs-number">1e8</span>))<br><br><span class="hljs-comment"># 设置机器学习流</span><br>logistic_pipe = make_pipeline(logistic_pre, logistic_model)<br><br><span class="hljs-comment"># 设置超参数空间</span><br>logistic_param = [<br>    &#123;<span class="hljs-string">&#x27;columntransformer__num&#x27;</span>:num_pre, <span class="hljs-string">&#x27;logit_threshold__thr&#x27;</span>: np.arange(<span class="hljs-number">0.1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>).tolist(), <span class="hljs-string">&#x27;logit_threshold__penalty&#x27;</span>: [<span class="hljs-string">&#x27;l1&#x27;</span>], <span class="hljs-string">&#x27;logit_threshold__C&#x27;</span>: np.arange(<span class="hljs-number">0.1</span>, <span class="hljs-number">1.1</span>, <span class="hljs-number">0.1</span>).tolist(), <span class="hljs-string">&#x27;logit_threshold__solver&#x27;</span>: [<span class="hljs-string">&#x27;saga&#x27;</span>]&#125;, <br>    &#123;<span class="hljs-string">&#x27;columntransformer__num&#x27;</span>:num_pre, <span class="hljs-string">&#x27;logit_threshold__thr&#x27;</span>: np.arange(<span class="hljs-number">0.1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>).tolist(), <span class="hljs-string">&#x27;logit_threshold__penalty&#x27;</span>: [<span class="hljs-string">&#x27;l2&#x27;</span>], <span class="hljs-string">&#x27;logit_threshold__C&#x27;</span>: np.arange(<span class="hljs-number">0.1</span>, <span class="hljs-number">1.1</span>, <span class="hljs-number">0.1</span>).tolist(), <span class="hljs-string">&#x27;logit_threshold__solver&#x27;</span>: [<span class="hljs-string">&#x27;lbfgs&#x27;</span>, <span class="hljs-string">&#x27;newton-cg&#x27;</span>, <span class="hljs-string">&#x27;sag&#x27;</span>, <span class="hljs-string">&#x27;saga&#x27;</span>]&#125;, <br>]<br><br><span class="hljs-comment"># 实例化网格搜索评估器</span><br>logistic_search_f1 = GridSearchCV(estimator = logistic_pipe,<br>                                  param_grid = logistic_param,<br>                                  scoring=<span class="hljs-string">&#x27;f1&#x27;</span>,<br>                                  n_jobs = <span class="hljs-number">12</span>)<br><br>s = time.time()<br>logistic_search_f1.fit(X_train, y_train)<br><span class="hljs-built_in">print</span>(time.time()-s, <span class="hljs-string">&quot;s&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="逻辑回归模型解释">逻辑回归模型解释</h2><p>对于逻辑回归的模型解释，核心是需要观察线性方程中自变量的系数，通过系数大小可以判断特征重要性，并且系数的具体数值也能表示因变量如何伴随自变量变化而变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#查看逻辑回归系数</span><br>coe = logistic_search.best_estimator_.named_steps[<span class="hljs-string">&#x27;logit_threshold&#x27;</span>].coef_<br>coe = coe.flatten()<br>coe<br><span class="hljs-comment"># 定位独热编码转化器</span><br>tf = logistic_search.best_estimator_.named_steps[<span class="hljs-string">&#x27;columntransformer&#x27;</span>].named_transformers_[<span class="hljs-string">&#x27;cat&#x27;</span>]<br>tf<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cate_colName</span>(<span class="hljs-params">Transformer, category_cols, drop=<span class="hljs-string">&#x27;if_binary&#x27;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    离散字段独热编码后字段名创建函数</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    :param Transformer: 独热编码转化器</span><br><span class="hljs-string">    :param category_cols: 输入转化器的离散变量</span><br><span class="hljs-string">    :param drop: 独热编码转化器的drop参数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <br>    cate_cols_new = []<br>    col_value = Transformer.categories_<br>    <br>    <span class="hljs-keyword">for</span> i, j <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(category_cols):<br>        <span class="hljs-keyword">if</span> (drop == <span class="hljs-string">&#x27;if_binary&#x27;</span>) &amp; (<span class="hljs-built_in">len</span>(col_value[i]) == <span class="hljs-number">2</span>):<br>            cate_cols_new.append(j)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> col_value[i]:<br>                feature_name = j + <span class="hljs-string">&#x27;_&#x27;</span> + f<br>                cate_cols_new.append(feature_name)<br>    <span class="hljs-keyword">return</span>(cate_cols_new)<br><span class="hljs-comment"># 转化后离散变量列名称</span><br>category_cols_new = cate_colName(tf, category_cols)<br><br><span class="hljs-comment"># 所有字段名称</span><br>cols_new = category_cols_new + numeric_cols<br><br><span class="hljs-comment"># 查看特征名称数量和特征系数数量是否一致</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(cols_new) == <span class="hljs-built_in">len</span>(coe)<br></code></pre></td></tr></table></figure><p>对于<spanclass="math inline">\(\ln\frac{y}{1-y}=\hat{w}^{T}\cdot\hat{x}=w_1x_1+w_2x_2+\dots+w_nx_n+b\)</span>而言每个<spanclass="math inline">\(x_i\)</span>的变化会不同程度的影响对数几率的变化。</p><p>以<spanclass="math inline">\(\ln\frac{y}{1-y}=2x_1-x_2\)</span>为例<spanclass="math inline">\(x_1\)</span>每增长1,<spanclass="math inline">\(y\)</span>判别为正例的对数几率就增加2，概率就增加0.4</p><p>此外，还可以根据系数来判别特征重要性。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/26/hello-world/"/>
    <url>/2022/06/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML基础知识</title>
    <link href="/2021/12/10/html%E5%85%A5%E9%97%A8/"/>
    <url>/2021/12/10/html%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>超文本标记语言——HTML，是一种用于创建网页的标准标记语言。</p><span id="more"></span><h1 id="正文">正文</h1><h2 id="一基础知识">一、基础知识</h2><h3 id="一标签">（一）标签</h3><p><code>HTML</code>语言由内容和标签构成，即：<code>&lt;标签&gt;内容&lt;/标签&gt;</code></p><ul><li><p>html的标签是成对出现的，开头和末尾，而标签代表描述类型的声明</p><p>例如：<code>&lt;b&gt;</code>和 <code>&lt;/b&gt;</code></p></li><li><p>标签对中的第一个标签是<strong>开始标签</strong>，第二个标签是<strong>结束标签</strong></p></li><li><p>开始和结束标签也被称为<strong>开放标签</strong>和<strong>闭合标签</strong></p></li></ul><p>ps:<code>html</code>元素和标签是一个意思，但元素往往就指开始标签和结束标签了</p><p>在web界面不会显示<strong>标签</strong>，标签决定将内容以什么样的格式（字体大小、排版等）显现给用户</p><p>例如，呈现的是这样</p><p><img src="https://s2.loli.net/2021/12/09/69Y58itHRkJMXxq.png" style="zoom:80%;" /></p><p>而代码实质是这样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>页面标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 以上是页面部分标题显示在任务模块中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是一个标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是另外一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--这是正文部分的内容--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二doctype-声明">（二）&lt;!DOCTYPE&gt; 声明</h3><p>&lt;!DOCTYPE&gt;声明有助于浏览器中正确显示网页。</p><p>网络上有很多不同的文件，如果能够正确声明HTML的版本，浏览器就能正确显示网页内容。（doctype声明是不区分大小写的）</p><p>一般情况下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="三编码格式">（三）编码格式</h3><p>目前在大部分浏览器中，直接输出中文会出现<strong>中文乱码</strong>的情况，这时候我们就需要在头部将字符声明为<strong>UTF-8</strong> 或 <strong>GBK</strong></p><p>因此介绍完之后，以此就是常用简单的 <code>HTML</code>的模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span> <span class="hljs-comment">&lt;!--声明部分写在最前面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--设置编码格式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br>页面标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <span class="hljs-comment">&lt;!--body写正文部分内容 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>即，一开始先声明，然后在<code>&lt;head&gt;</code>中指定编码格式和页面标题，其次就是<code>&lt;body&gt;</code>即正文部分</p><h2 id="二结构标签">二、结构标签</h2><h3 id="一html-标题">（一）HTML 标题</h3><p>HTML 标题是通过<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code>标签来定义的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我的二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我的三级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>我的四级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="https://s2.loli.net/2021/12/09/Ow7ZrRHt1kg23ad.png"alt="这里是不是很像markdown😂" /><figcaption aria-hidden="true">这里是不是很像markdown😂</figcaption></figure><h3 id="二html-段落">（二）HTML 段落</h3><p>HTML 段落是通过标签 <code>&lt;p&gt;</code> 来定义的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第二个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第三个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>这是第一个段落。</p><p>这是第二个段落。</p><p>这是第三个段落。</p></blockquote><h3 id="三html-链接">（三）HTML 链接</h3><p>HTML 链接是通过标签 <code>&lt;a&gt;</code> 来定义的</p><p>在标签的内部写入 <code>href = 连接</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://zhang-jia-ju.github.io/&quot;</span>&gt;</span>这是一个链接使用了 href 属性<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><ahref="%5BZhang&#39;s%20blog%20(zhang-jia-ju.github.io)%5D(https://zhang-jia-ju.github.io/)">这是一个链接使用了href 属性</a></p></blockquote><h3 id="四html-图像">（四）HTML 图像</h3><p>HTML 图像是通过标签 <code>&lt;img&gt;</code> 来定义的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图片连接&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;258&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;39&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="五换行符">（五）换行符</h3><p>HTML中使用 <code>&lt;br&gt;</code>换行</p><p>并且换行标签没有结束标签，是一个<strong>单标签</strong></p><p>这里有一个小细节，就是在<strong>HTML4</strong>标准中，换行符是这样的<code>&lt;br/&gt;</code></p><p>而在目前广泛使用的<strong>HTML5</strong>中，换行符是<code>&lt;br&gt;</code>,不加斜杠</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我爱我的国<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>我爱我的校<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>我爱我的国 我爱我的校</p></blockquote><h3 id="六水平线">（六）水平线</h3><p>这里也是一个<strong>单标签</strong>，用<code>&lt;hr&gt;</code>表示</p><pre><code class="hljs">即会在该位置产生一个水平线，很容易理解，不再演示了</code></pre><h2 id="三功能标签">三、功能标签</h2><h3 id="一定义一个列表">（一）定义一个列表</h3><h4 id="有序列表">1.有序列表</h4><p>这里有序是指系统自动用<strong>阿拉伯数字</strong>进行排序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">OL</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Li</span>&gt;</span>工业工程<span class="hljs-tag">&lt;/<span class="hljs-name">Li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Li</span>&gt;</span>工程管理<span class="hljs-tag">&lt;/<span class="hljs-name">Li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Li</span>&gt;</span>电子商务<span class="hljs-tag">&lt;/<span class="hljs-name">Li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Li</span>&gt;</span>物流管理<span class="hljs-tag">&lt;/<span class="hljs-name">Li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">OL</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="无序列表">2.无序列表</h4><p>无序列表，使用<strong>符号</strong>进行排列，顺序按代码中的先后顺序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">UL</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Li</span>&gt;</span>工业工程<span class="hljs-tag">&lt;/<span class="hljs-name">Li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Li</span>&gt;</span>工程管理<span class="hljs-tag">&lt;/<span class="hljs-name">Li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Li</span>&gt;</span>电子商务<span class="hljs-tag">&lt;/<span class="hljs-name">Li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Li</span>&gt;</span>物流管理<span class="hljs-tag">&lt;/<span class="hljs-name">Li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">UL</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自定义列表">3.自定义列表</h4><p>使用<strong>自定义的序号</strong>的列表，先后顺序仍按照代码中的先后顺序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>Black hot drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>White cold drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>Coffee</p><blockquote><p>Black hot drink</p></blockquote><p>Milk</p><blockquote><p>White cold drink</p></blockquote></blockquote><h3 id="二短语标签">（二）短语标签</h3><table><thead><tr class="header"><th style="text-align: center;">标签</th><th style="text-align: center;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>&lt;em&gt;</code></td><td style="text-align: center;">呈现为被强调的文本。</td></tr><tr class="even"><td style="text-align: center;"><code>&lt;strong&gt;</code></td><td style="text-align: center;">定义重要的文本。</td></tr><tr class="odd"><td style="text-align: center;"><code>&lt;dfn&gt;</code></td><td style="text-align: center;">定义一个定义项目。</td></tr><tr class="even"><td style="text-align: center;"><code>&lt;code&gt;</code></td><td style="text-align: center;">定义计算机代码文本。</td></tr><tr class="odd"><td style="text-align: center;"><code>&lt;samp&gt;</code></td><td style="text-align: center;">定义样本文本。</td></tr><tr class="even"><td style="text-align: center;"><code>&lt;kbd&gt;</code></td><tdstyle="text-align: center;">定义键盘文本。它表示文本是从键盘上键入的。它经常用在与计算机相关的文档或手册中。</td></tr><tr class="odd"><td style="text-align: center;"><code>&lt;var&gt;</code></td><tdstyle="text-align: center;">定义变量。您可以将此标签与<code>&lt;pre&gt;</code>及 <code>&lt;code&gt;</code> 标签配合使用。</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>强调文本<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>加粗文本<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dfn</span>&gt;</span>定义项目<span class="hljs-tag">&lt;/<span class="hljs-name">dfn</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>一段电脑代码 print(&quot;Hello World&quot;)<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">samp</span>&gt;</span>计算机样本<span class="hljs-tag">&lt;/<span class="hljs-name">samp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>键盘输入<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">var</span>&gt;</span>变量<span class="hljs-tag">&lt;/<span class="hljs-name">var</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/09/eyZho3CjPANIkOJ.png" /></p><h3 id="三标记标签">（三）标记标签</h3><p><code>&lt;del&gt;</code>和<code>&lt;ins&gt;</code>分别可以生成<strong>删除线</strong>和<strong>下划线</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我喜欢<span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>她<span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span>你<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我喜欢<span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>她<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/09/gWJo2hCkpam7IRL.png" alt="删除线&下划线"  /></p><h2 id="四头部元素">四、头部元素</h2><h3 id="一-meta元素">（一） <code>&lt;meta&gt;</code>元素</h3><p><code>&lt;meta&gt;</code>标签描述了一些基本的元数据。<code>&lt;meta&gt;</code>标签提供了元数据.元数据也不显示在页面上，但会被浏览器解析</p><ul><li><p>为搜索引擎定义关键词</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;HTML, CSS, XML, XHTML, JavaScript&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>为网页定义描述内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;免费 Web &amp; 编程 教程&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>定义网页作者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Runoob&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>每30秒钟刷新当前页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="二script标签">（二）<code>&lt;script&gt;</code>标签</h3><p><code>&lt;script&gt;</code>标签用于定义客户端脚本，比如JavaScript。</p><p><code>&lt;script&gt;</code>元素既可包含脚本语句，也可以通过 "src"属性指向外部脚本文件。</p><p>JavaScript 通常用于图像操作、表单验证以及动态内容更改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="三-title标签">（三） <code>&lt;title&gt;</code>标签</h3><p>这个不用多说——定义了浏览器工具栏的标题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文档标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="五建立一个表格表单">五、建立一个表格&amp;表单</h2><h3 id="一创建表格">（一）创建表格</h3><p>创建表格之前首先要明白 <code>&lt;tr&gt;</code><code>&lt;/tr&gt;</code>和 <code>&lt;td&gt;</code><code>&lt;/td&gt;</code>以及 <code>&lt;th&gt;</code><code>&lt;/th&gt;</code>三者的区别</p><p>先来看一串代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 声明编码类型 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>通讯录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-comment">&lt;!-- 以下是html的主体内容 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 声明边框的宽度 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span> &gt;</span>通讯录<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><span class="hljs-comment">&lt;!-- 这里使得表中的内容剧中并且声明表的名称 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>QQ<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>联系电话<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>123456789<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>123456789<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><pre><code class="hljs">通讯录</code></pre><table><thead><tr class="header"><th style="text-align: center;">姓名</th><th style="text-align: center;">QQ</th><th style="text-align: center;">联系电话</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">张三</td><td style="text-align: center;">123456789</td><td style="text-align: center;">123456789</td></tr></tbody></table><p>由此可见</p><ul><li><code>&lt;tr&gt;</code><code>&lt;/tr&gt;</code>的作用是为表格定义一行，在同一对该标签内，表示同一行，而先后顺序表示<strong>从左往右</strong>的顺序，</li><li><code>&lt;th&gt;</code><code>&lt;/th&gt;</code>中<strong>h</strong>即表示<strong>head</strong>,所以显而易见该标签使用来定义表格中的<strong>表头</strong>单元格，即姓名、QQ、联系电话</li><li><code>&lt;td&gt;</code><code>&lt;/td&gt;</code>中的<strong>d</strong>表示<strong>data</strong>，所以该标签用来定义表格中的数据单元格，说白了就是表中的数据，即张三、123456789、123456789</li></ul><p>所以表格的主体内容由这三个标签负责，且都嵌套在<code>&lt;table&gt;</code> <code>&lt;/table&gt;</code>中</p><p><code>&lt;caption&gt;</code>的作用是定义一个表格的名字，这个名字会被放在表格的中心正上方</p><p><code>&lt;align&gt;</code>的作用是定义表格在网页中的位置，靠左、靠右、居中</p><h4 id="补充">补充</h4><p>在常见的网页设计中为了保证一定的美观性，通常情况下，会为单元格之间添加<strong>格间距</strong>和<strong>格边距</strong></p><h6 id="格间距">格间距</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>单元格间距=&quot;10&quot;:<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>First<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Second<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/10/DbnXqRP1c672w9I.png" alt="image-20211210190931887" style="zoom:80%;" /></p><p>是在<code>&lt;table&gt;</code>内添加一个<strong>cellspacing</strong>并赋予其值（值的大小决定间距的大小）。</p><h6 id="格边距">格边距</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>First<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>   <br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Second<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/10/fZw4s3CJ2bzyBSn.png" alt="image-20211210191304335" style="zoom:80%;" /></p><p>与上面类似，是在<code>&lt;table&gt;</code>里加一个<strong>cellpadding</strong>赋予其值的大小。</p><h3 id="二创建表单">（二）创建表单</h3><p><strong>表单</strong>这里相较于<strong>表格的</strong>区别就是可以进行<strong>数据</strong>的<strong>输入</strong></p><p>输入的内容包括：文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等</p><p>多数情况下被用到的表单标签是输入标签<code>&lt;input&gt;</code>。输入类型（文本域，下拉列表，单选框，复选框）是由类型属性（<code>type</code>）定义的。</p><h4 id="文本域">1.文本域</h4><p>文本域通过<code>&lt;input type="text"&gt;</code>标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域。</p><p>创建一个简单的文本域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;firstname&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>Last name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastname&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/10/eLM3vxi7AU4kNlR.png" alt="image-20211210164041886"  /></p><p>ps: 文本域的默认宽度是 20 个字符</p><h4 id="密码字段">2.密码字段</h4><p>密码字段通过标签 <code>&lt;input type="password"&gt;</code>来定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>Password: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="https://s2.loli.net/2021/12/10/EYN5HB2IrvXukcF.png"alt="image-20211210164512603" /><figcaption aria-hidden="true">image-20211210164512603</figcaption></figure><p>密码在输入的时候并不显示明文，而是以星号或者原点代替</p><h4 id="单选按钮radio-buttons">3.单选按钮（Radio Buttons）</h4><p><code>&lt;input type="radio"&gt;</code>标签定义了表单单选框选项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>Male<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>Female<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="https://s2.loli.net/2021/12/10/Dj2siYwyPHXnGJk.png"alt="image-20211210164818046" /><figcaption aria-hidden="true">image-20211210164818046</figcaption></figure><p><code>value</code>表示选中选项的<strong>实际值</strong>，而至于后面写的Male和Female只是选项上面的字</p><h4 id="复选按钮">4.复选按钮</h4><p>与单选框类似，不过就是改成一个<strong>多选题</strong>而已，<code>&lt;input type="checkbox"&gt;</code>定义了复选框.用户需要从若干给定的选择中选取一个或若干选项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;vehicle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Bike&quot;</span>&gt;</span>I have a bike<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;vehicle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Car&quot;</span>&gt;</span>I have a car<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="https://s2.loli.net/2021/12/10/H9KLVskvqS3EZTR.png"alt="image-20211210165112757" /><figcaption aria-hidden="true">image-20211210165112757</figcaption></figure><h4 id="提交和重置按钮">5.提交和重置按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;html_form_action.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>Username: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--定义提交按钮 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><img src="https://s2.loli.net/2021/12/10/gEtIkc84P6fZO3A.png"alt="image-20211210165618876" /><figcaption aria-hidden="true">image-20211210165618876</figcaption></figure><p>这里补充一个小细节，<code>action</code>,当提交表单时，表单数据会提交到名为<code>html_form_action.php</code>的界面；而<code>method</code>属性是规定如何发送表单数据（表单数据发送到action属性所规定的页面）。</p><p>表单数据可以作为URL变量（method="get"）或者HTTPpost（method="post"）的方式来发送。</p><p><strong>重置按钮</strong>如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Reset&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>两者都有一个<code>value</code>值,这个主要是设定提交/重置按键上面的字</p><hr /><p>综上所述吧，暂且到此为止，HTML的知识点太多了，后续遇到还会再更新，主要是我好累啊~，我想睡会觉</p>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MATLAB基础知识</title>
    <link href="/2021/10/13/MATLAB%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2021/10/13/MATLAB%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>从今天起就步入MATLAB的学习了，这也是建模的开端，接下来的日子里仍然会保持Python语言的更新（PS：在博文中我会对MATLAB简称为MAT，软件版本为MATLABR2018a）</p><table style="width:10%;"><tbody><tr class="odd"><td><span id="more"></span></td></tr><tr class="even"><td># MAT命令的组成</td></tr><tr class="odd"><td>## 一、基本的符号 "&gt;&gt;"</td></tr><tr class="even"><td>命令行“头首”的"&gt;&gt;"是“指令输入提示符”，它是由软件自动生成的。</td></tr><tr class="odd"><td>即打开MAT后就会看到</td></tr><tr class="even"><td><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br></code></pre></td></tr></table></figure></td></tr><tr class="odd"><td>"&gt;&gt;"为运算提示符，表示软件准备就绪，在此输入命令并“回车”后就可以运行，相信大家在Python里见过，这里就不过多解释了。</td></tr><tr class="even"><td>## 二、功能符号</td></tr><tr class="odd"><td>| 标点 | 定义 | | :---: | :----------------------: | |<code>:</code> | 具有多种功能 | | <code>;</code> |区分行以及取消运行显示 | | <code>,</code> | 区分列及函数参数分隔符等 | |<code>()</code> | 指定运算优先顺序 | | <code>[]</code> | 定义矩阵 | |<code>&#123;&#125;</code> | 用于构成单元数组 | | <code>.</code> | 小数点及域访问符| | <code>...</code> | 续行号 | | <code>%</code> | 注释 | |<code>!</code> | 调用操作系统运算 | | <code>=</code> | 赋值 | |<code>'</code> | 字符串标记符 |</td></tr><tr class="even"><td>### （一）分号</td></tr><tr class="odd"><td>一般情况下，在MAT中命令行窗口输入命令，系统即会计算出结果</td></tr><tr class="even"><td><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><br>&gt;&gt; A=[<span class="hljs-number">1</span> <span class="hljs-number">2</span>;<span class="hljs-number">3</span> <span class="hljs-number">4</span>]<br><br>A =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span><br>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><br></code></pre></td></tr></table></figure></td></tr><tr class="odd"><td>若不想让MAT每次都显示运算结果，只需要在运算式最后加上分号<code>;</code>即：</td></tr><tr class="even"><td><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; A=[<span class="hljs-number">1</span> <span class="hljs-number">2</span>;<span class="hljs-number">3</span> <span class="hljs-number">4</span>];<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br></code></pre></td></tr></table></figure></td></tr><tr class="odd"><td>MAT不输出结果</td></tr><tr class="even"><td>### （二）续行号</td></tr><tr class="odd"><td>若在输入命令时，若命令过长，一行不便于浏览，则可以通过续行号<code>...</code>使得命令分多行完成</td></tr><tr class="even"><td><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; y=<span class="hljs-number">1</span>+<span class="hljs-number">3</span>+<span class="hljs-number">5</span>+<span class="hljs-number">2</span>+<span class="hljs-number">7</span>+<span class="hljs-number">5</span>+...<br><span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">3</span>+<span class="hljs-number">4</span>+<span class="hljs-number">5</span>+<span class="hljs-number">2</span><br><br>y =<br><br>    <span class="hljs-number">40</span><br></code></pre></td></tr></table></figure></td></tr><tr class="odd"><td>### （三）插入变量</td></tr><tr class="even"><td>这里没啥说的和C语言一样在变量插入时需要对变量进行定义</td></tr><tr class="odd"><td>否则就会出现：</td></tr><tr class="even"><td><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; x<br>未定义函数或变量 <span class="hljs-string">&#x27;x&#x27;</span>。<br></code></pre></td></tr></table></figure></td></tr><tr class="odd"><td>定义变量时可以加入公式，但是必须是常量公式</td></tr><tr class="even"><td><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; x=<span class="hljs-number">4</span>*<span class="hljs-number">3</span><br><br>x =<br><br>    <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure></td></tr><tr class="odd"><td>## 三、常用指令</td></tr><tr class="even"><td>下面介绍几个MAT使用过程中经常会用到的一些指令</td></tr><tr class="odd"><td>### （一）cd:显示或改变工作目录</td></tr><tr class="even"><td><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; cd<br>E:\MATLAB666\MATLAB main file\bin<br></code></pre></td></tr></table></figure></td></tr><tr class="odd"><td>### （二）clc:清理命令行窗口</td></tr><tr class="even"><td><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; clc<br></code></pre></td></tr></table></figure></td></tr><tr class="odd"><td>### （三）clear:清除内存变量</td></tr><tr class="even"><td><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; a=<span class="hljs-number">1</span><br><br>a =<br><br>     <span class="hljs-number">1</span><br><br>&gt;&gt; clear a<br>&gt;&gt; a<br>未定义函数或变量 <span class="hljs-string">&#x27;a&#x27;</span>。<br></code></pre></td></tr></table></figure></td></tr><tr class="odd"><td>### （四）其他常用的操作命令如下</td></tr><tr class="even"><td>| 命令 | 功能 | | :----: | :----------------: | | <code>clf</code> |清楚图形窗口 | | <code>dir</code> | 显示当前目录文件 | |<code>disp</code> | 显示变量或文字内容 | | <code>hold</code> | 保持图形| | <code>path</code> | 显示搜索目录 | | <code>type</code> |显示文件内容 | | <code>load</code> | 加载指定文件的变量 |</td></tr></tbody></table><h1 id="数据类型">数据类型</h1><h2 id="一变量与常量">一、变量与常量</h2><h3 id="一变量">（一）变量</h3><p>与C语言不同的是MAT中不需要对变量进行提前声明，但是需要对变量进行定义，在上文提到。</p><p>命名遵循以下原则：</p><ul><li>变量名必须以字母开头，之后可以是任意的字母、数字或下划线</li><li>变量名区分字母大小写</li><li>变量名不超过<strong>31</strong>个字符，第31个字符往后的字符将会被忽略(名字这么长，基本不可能🤭)</li></ul><h3 id="二常量">（二）常量</h3><p>MAT自身给了一些预定义的变量，这些可以理解为常量</p><table><thead><tr class="header"><th style="text-align: center;">变量名称</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>ans</code></td><td style="text-align: center;">MAT默认变量</td></tr><tr class="even"><td style="text-align: center;"><code>pi</code></td><td style="text-align: center;">圆周率3.1415...</td></tr><tr class="odd"><td style="text-align: center;"><code>eps</code></td><td style="text-align: center;"><ahref="%5B浮点相对精度%20-%20MATLAB%20eps%20-%20MathWorks%20中国%5D(https://ww2.mathworks.cn/help/matlab/ref/eps.html)">浮点运算的相对精度</a></td></tr><tr class="even"><td style="text-align: center;"><code>inf</code></td><td style="text-align: center;">无穷大</td></tr><tr class="odd"><td style="text-align: center;"><code>NaN</code></td><td style="text-align: center;">不定值，如0/0、∞/∞</td></tr><tr class="even"><td style="text-align: center;"><code>i(j)</code></td><td style="text-align: center;">负数中的虚数单位</td></tr><tr class="odd"><td style="text-align: center;"><code>realmin</code></td><td style="text-align: center;"><ahref="%5B计算机中的浮点数%20-%20简书%20(jianshu.com)%5D(https://www.jianshu.com/p/046535189bf6)">最小正浮点数</a></td></tr><tr class="even"><td style="text-align: center;"><code>realmax</code></td><td style="text-align: center;"><ahref="%5B计算机中的浮点数%20-%20简书%20(jianshu.com)%5D(https://www.jianshu.com/p/046535189bf6)">最大正浮点数</a></td></tr></tbody></table><p>利用<code>clear</code>举一个例子与上文进行对比</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-built_in">pi</span><br><br><span class="hljs-built_in">ans</span> =<br><br>    <span class="hljs-number">3.1416</span><br><br>&gt;&gt; clear <span class="hljs-built_in">pi</span><br>&gt;&gt; <span class="hljs-built_in">pi</span><br><br><span class="hljs-built_in">ans</span> =<br><br>    <span class="hljs-number">3.1416</span><br></code></pre></td></tr></table></figure><h2 id="二数值">二、数值</h2><p>MAT中数值类型分为<strong>整型</strong>、<strong>浮点型</strong>、<strong>复数类型</strong>三种</p><h3 id="一整型">（一）整型</h3><p>整型一共包括八种即：</p><p><code>unsigned char</code>, <code>signed char</code>,<code>short int</code>,<code>unsigned short int</code>,<code>int</code>, <code>unsigned int</code>, <code>long int</code>,<code>unsigned long</code></p><p>很简单，就不一一介绍了<ahref="https://zhidao.baidu.com/question/1672296493207256947.html#:~:text=整数的数据类型有8种%3A%20unsigned%20char%2C%20signed%20char%2C%20short%20int%2C%20unsigned,int%2C%20int%2C%20unsigned%20int%2C%20long%20int%2C%20unsigned%20long。">🔗</a></p><h3 id="二浮点型">（二）浮点型</h3><p>浮点型只采取十进制，表示形式有两种，即十进制数形式<code>1.545</code>和指数形式<code>2.5E5</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-number">2.5E5</span><br><br><span class="hljs-built_in">ans</span> =<br><br>      <span class="hljs-number">250000</span><br></code></pre></td></tr></table></figure><p>以下为<del>合法</del>不合法的实数，<del>请引用</del></p><ul><li><p><code>345</code>:无小数点</p></li><li><p><code>E7</code>:阶码前无数字</p></li><li><p><code>-5</code>：无阶码标志</p></li><li><p><code>53.-E3</code>:负号位置❌</p></li><li><p><code>2.7E</code>:无阶码补充一点，浮点型变量MAT中也分为两类，单精度和双精度型。</p></li></ul><h3 id="三复数类型">（三）复数类型</h3><p>形如<code>a+bi</code>的数成为复数，高中基础，不过多介绍了，不懂看<ahref="%5B复数（数的概念扩展）_百度百科%20(baidu.com)%5D(https://baike.baidu.com/item/复数/254365)">链接</a></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-number">1</span>+<span class="hljs-number">2</span><span class="hljs-built_in">i</span><br><br><span class="hljs-built_in">ans</span> =<br><br>   <span class="hljs-number">1.0000</span> + <span class="hljs-number">2.0000</span><span class="hljs-built_in">i</span><br></code></pre></td></tr></table></figure><hr /><h1 id="运算符">运算符</h1><h2 id="一算术运算符">一、算术运算符</h2><table><thead><tr class="header"><th style="text-align: center;">符号</th><th style="text-align: center;">角色</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>+</code></td><td style="text-align: center;">加法（一元）</td></tr><tr class="even"><td style="text-align: center;"><code>-</code></td><td style="text-align: center;">减法（一元）</td></tr><tr class="odd"><td style="text-align: center;"><code>.\*</code></td><td style="text-align: center;">按元素乘法</td></tr><tr class="even"><td style="text-align: center;"><code>*</code></td><td style="text-align: center;">矩阵乘法</td></tr><tr class="odd"><td style="text-align: center;"><code>./</code></td><td style="text-align: center;">按元素右除</td></tr><tr class="even"><td style="text-align: center;"><code>/</code></td><td style="text-align: center;">矩阵右除</td></tr><tr class="odd"><td style="text-align: center;"><code>.\</code></td><td style="text-align: center;">矩阵左除（也称为<em>反斜杠</em>）</td></tr><tr class="even"><td style="text-align: center;"><code>.^</code></td><td style="text-align: center;">按元素求幂</td></tr><tr class="odd"><td style="text-align: center;"><code>^</code></td><td style="text-align: center;">矩阵幂</td></tr><tr class="even"><td style="text-align: center;"><code>.'</code></td><td style="text-align: center;">转置</td></tr><tr class="odd"><td style="text-align: center;"><code>'</code></td><td style="text-align: center;">复共轭转置</td></tr></tbody></table><p>## 二、关系运算符</p><table><thead><tr class="header"><th style="text-align: center;">关系运算符</th><th style="text-align: center;">定义</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>&lt;</code></td><td style="text-align: center;">小于</td></tr><tr class="even"><td style="text-align: center;"><code>&lt;=</code></td><td style="text-align: center;">小于或等于</td></tr><tr class="odd"><td style="text-align: center;"><code>&gt;</code></td><td style="text-align: center;">大于</td></tr><tr class="even"><td style="text-align: center;"><code>\&gt;=</code></td><td style="text-align: center;">大于或等于</td></tr><tr class="odd"><td style="text-align: center;"><code>==</code></td><td style="text-align: center;">等于</td></tr><tr class="even"><td style="text-align: center;"><code>~=</code></td><td style="text-align: center;">不等于</td></tr></tbody></table><p>## 三、逻辑运算符</p><table><thead><tr class="header"><th style="text-align: center;">逻辑运算符</th><th style="text-align: center;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>&amp;</code></td><td style="text-align: center;">逻辑与运算符</td></tr><tr class="even"><td style="text-align: center;"><code>|</code></td><td style="text-align: center;">逻辑或运算符</td></tr><tr class="odd"><td style="text-align: center;"><code>~</code></td><td style="text-align: center;">逻辑非运算符</td></tr><tr class="even"><td style="text-align: center;"><strong>逻辑运算函数</strong></td><td style="text-align: center;"><strong>描述</strong></td></tr><tr class="odd"><td style="text-align: center;"><code>and(A, B)</code></td><td style="text-align: center;">逻辑与运算函数，A 和 B 都为 1 时返回1，否则返回 0</td></tr><tr class="even"><td style="text-align: center;"><code>or(A, B)</code></td><td style="text-align: center;">逻辑或运算函数，A 和 B 有一个为 1 时返回1，都为 0 时才返回 0</td></tr><tr class="odd"><td style="text-align: center;"><code>not(A)</code></td><td style="text-align: center;">逻辑非运算，A 为 1 时返回 0，A 为 0时返回 1</td></tr><tr class="even"><td style="text-align: center;"><code>xor(A, B)</code></td><td style="text-align: center;">异或运算函数，A 和 B 不同是返回1，相同时返回 0</td></tr><tr class="odd"><td style="text-align: center;"><strong>向量运算函数</strong></td><td style="text-align: center;"><strong>描述</strong></td></tr><tr class="even"><td style="text-align: center;"><code>any(A)</code></td><td style="text-align: center;">向量 A 中有非 0 元素时返回 1，矩阵 A某一列有非 0 元素时返回 1</td></tr><tr class="odd"><td style="text-align: center;"><code>all(A)</code></td><td style="text-align: center;">向量 A 中所有元素都为非 0 时返回 1，矩阵A 中某列所有元素都为非 0 时返回 1</td></tr></tbody></table><hr /><h1 id="函数运算">函数运算</h1><h2 id="一复数运算">（一）复数运算</h2><p>以下是MAT提供的复数运算函数</p><table><thead><tr class="header"><th style="text-align: center;"><ahref="https://ww2.mathworks.cn/help/matlab/ref/abs.html"><code>abs</code></a></th><th>绝对值和复数的模</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><ahref="https://ww2.mathworks.cn/help/matlab/ref/angle.html"><code>angle</code></a></td><td>相位角</td></tr><tr class="even"><td style="text-align: center;"><ahref="https://ww2.mathworks.cn/help/matlab/ref/complex.html"><code>complex</code></a></td><td>创建复数数组</td></tr><tr class="odd"><td style="text-align: center;"><ahref="https://ww2.mathworks.cn/help/matlab/ref/conj.html"><code>conj</code></a></td><td>复共轭</td></tr><tr class="even"><td style="text-align: center;"><ahref="https://ww2.mathworks.cn/help/matlab/ref/cplxpair.html"><code>cplxpair</code></a></td><td>将复数排序为复共轭对组</td></tr><tr class="odd"><td style="text-align: center;"><ahref="https://ww2.mathworks.cn/help/matlab/ref/i.html"><code>i</code></a></td><td>虚数单位</td></tr><tr class="even"><td style="text-align: center;"><ahref="https://ww2.mathworks.cn/help/matlab/ref/imag.html"><code>imag</code></a></td><td>复数的虚部</td></tr><tr class="odd"><td style="text-align: center;"><ahref="https://ww2.mathworks.cn/help/matlab/ref/isreal.html"><code>isreal</code></a></td><td>确定数组是否使用复数存储</td></tr><tr class="even"><td style="text-align: center;"><ahref="https://ww2.mathworks.cn/help/matlab/ref/j.html"><code>j</code></a></td><td>虚数单位</td></tr><tr class="odd"><td style="text-align: center;"><ahref="https://ww2.mathworks.cn/help/matlab/ref/real.html"><code>real</code></a></td><td>复数的实部</td></tr><tr class="even"><td style="text-align: center;"><ahref="https://ww2.mathworks.cn/help/matlab/ref/sign.html"><code>sign</code></a></td><td>Sign 函数（符号函数）</td></tr><tr class="odd"><td style="text-align: center;"><ahref="https://ww2.mathworks.cn/help/matlab/ref/unwrap.html"><code>unwrap</code></a></td><td>平移相位角</td></tr></tbody></table><p>## （二）三角函数运算</p><table><thead><tr class="header"><th style="text-align: center;">函数名</th><th style="text-align: center;">功能描述</th><th style="text-align: center;">函数名</th><th style="text-align: center;">功能描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">sin</td><td style="text-align: center;">正弦</td><td style="text-align: center;">sec</td><td style="text-align: center;">正割</td></tr><tr class="even"><td style="text-align: center;">sind</td><td style="text-align: center;">正弦，输入以度为单位</td><td style="text-align: center;">secd</td><td style="text-align: center;">正割，输入以度为单位</td></tr><tr class="odd"><td style="text-align: center;">sinh</td><td style="text-align: center;">双曲正弦</td><td style="text-align: center;">sech</td><td style="text-align: center;">双曲正割</td></tr><tr class="even"><td style="text-align: center;">asin</td><td style="text-align: center;">反正弦</td><td style="text-align: center;">asec</td><td style="text-align: center;">反正割</td></tr><tr class="odd"><td style="text-align: center;">asind</td><td style="text-align: center;">反正弦，输出以度为单位</td><td style="text-align: center;">asecd</td><td style="text-align: center;">反正割，输出以度为单位</td></tr><tr class="even"><td style="text-align: center;">asinh</td><td style="text-align: center;">反双曲正弦</td><td style="text-align: center;">asech</td><td style="text-align: center;">反双曲正割</td></tr><tr class="odd"><td style="text-align: center;">cos</td><td style="text-align: center;">余弦</td><td style="text-align: center;">csc</td><td style="text-align: center;">余割</td></tr><tr class="even"><td style="text-align: center;">cosd</td><td style="text-align: center;">余弦，输出以度为单位</td><td style="text-align: center;">cscd</td><td style="text-align: center;">余割，输出以度为单位</td></tr><tr class="odd"><td style="text-align: center;">cosh</td><td style="text-align: center;">双曲余弦</td><td style="text-align: center;">csch</td><td style="text-align: center;">双曲余割</td></tr><tr class="even"><td style="text-align: center;">acos</td><td style="text-align: center;">反余弦</td><td style="text-align: center;">acsc</td><td style="text-align: center;">反余割</td></tr><tr class="odd"><td style="text-align: center;">acosd</td><td style="text-align: center;">反余弦，输入以度为单位</td><td style="text-align: center;">acscd</td><td style="text-align: center;">反余割，输出以度为单位</td></tr><tr class="even"><td style="text-align: center;">acosh</td><td style="text-align: center;">反双曲余弦</td><td style="text-align: center;">acsch</td><td style="text-align: center;">反双曲余割</td></tr><tr class="odd"><td style="text-align: center;">tan</td><td style="text-align: center;">正切</td><td style="text-align: center;">cot</td><td style="text-align: center;">余切</td></tr><tr class="even"><td style="text-align: center;">tand</td><td style="text-align: center;">正切，输入以度为单位</td><td style="text-align: center;">cotd</td><td style="text-align: center;">余切，输出以度为单位</td></tr><tr class="odd"><td style="text-align: center;">tanh</td><td style="text-align: center;">双曲正切</td><td style="text-align: center;">coth</td><td style="text-align: center;">双曲余切</td></tr><tr class="even"><td style="text-align: center;">atan</td><td style="text-align: center;">反正切</td><td style="text-align: center;">acot</td><td style="text-align: center;">反余切</td></tr><tr class="odd"><td style="text-align: center;">atand</td><td style="text-align: center;">反正切，输出以度为单位</td><td style="text-align: center;">acotd</td><td style="text-align: center;">反余切，输出以度为单位</td></tr><tr class="even"><td style="text-align: center;">atan2</td><td style="text-align: center;">四象限反正切</td><td style="text-align: center;">acoth</td><td style="text-align: center;">反双曲余切</td></tr></tbody></table><h1 id="向量">向量</h1><h2 id="一向量的生成">一、向量的生成</h2><p>向量的生成有直接输入法、冒号法和利用MAT函数创建三种方法</p><h3 id="一直接输入法">（一）直接输入法</h3><p>顾名思义就是在使用向量时在命令行直接输入，但格式要求如下：</p><ul><li>向量元素需要使用<code>[]</code>括起来</li><li>元素之间可以用空格、分号、逗号间隔</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; x=[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> ]<br>&gt;&gt; x=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>&gt;&gt; x=[<span class="hljs-number">1</span>;<span class="hljs-number">2</span>;<span class="hljs-number">3</span>;<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><h3 id="二冒号法">（二）冒号法</h3><p>基本格式是<code>x=first:increment:last</code>,可以表示创建一个从<code>first</code>开始到<code>last</code>结束，元素增量为<code>increment</code>。若增量为<strong>1</strong>，那么<code>increment</code>可以省略不写</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; x=<span class="hljs-number">0</span>:<span class="hljs-number">2</span>:<span class="hljs-number">8</span><br><br>x =<br><br>     <span class="hljs-number">0</span>     <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">6</span>     <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h3 id="三利用linspace函数">（三）利用<code>linspace</code>函数</h3><p><code>linspace</code>可以直接定义数据元素的个数,格式为<code>linspace(first_value,last_value,number)</code>,<code>number</code>表示向量元素的个数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-built_in">linspace</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">0</span>     <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">6</span>     <span class="hljs-number">8</span>    <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="四利用logspace函数">（四）利用<code>logspace</code>函数</h3><p><code>logspace</code>也是通过直接定义向量元素的个数进行创建，格式也是<code>linspace(first_value,last_value,number)</code>,但与之不同的是创建的是一个从10<sup>first_value</sup>开始，到10<sup>last_value</sup>结束的并包括number个元素的向量</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-built_in">logspace</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>          <span class="hljs-number">10</span>         <span class="hljs-number">100</span>        <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><h2 id="二向量元素的引用">二、向量元素的引用</h2><p>常用的引用方式</p><table><thead><tr class="header"><th style="text-align: center;">格式</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>x(n)</code></td><tdstyle="text-align: center;">表示向量中的第<strong>n</strong>个元素</td></tr><tr class="even"><td style="text-align: center;"><code>x(n1:n2)</code></td><tdstyle="text-align: center;">表示向量中第<strong>n1</strong>至第<strong>n2</strong>个元素</td></tr></tbody></table><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; x=[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>];<br>&gt;&gt; x(<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; x=[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> ];<br>&gt;&gt; x(<span class="hljs-number">1</span>:<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="三向量运算">三、向量运算</h2><p>线性代数告诉我们向量可以看成一个特殊的矩阵，所有向量运算实质上就是矩阵的运算，这里除了<strong>四则运算外</strong>还有向量的<strong>点积</strong>、<strong>叉积</strong>和<strong>混合积</strong></p><h3 id="一四则运算">（一）四则运算</h3><h4 id="对向量定义">1.对向量定义</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; a=<span class="hljs-built_in">logspace</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)<br><br>a =<br><br>           <span class="hljs-number">1</span>          <span class="hljs-number">10</span>         <span class="hljs-number">100</span>        <span class="hljs-number">1000</span>       <span class="hljs-number">10000</span>      <span class="hljs-number">100000</span><br></code></pre></td></tr></table></figure><h4 id="加法运算">2.加法运算</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; a+<span class="hljs-number">10</span><br><br><span class="hljs-built_in">ans</span> =<br><br>          <span class="hljs-number">11</span>          <span class="hljs-number">20</span>         <span class="hljs-number">110</span>        <span class="hljs-number">1010</span>       <span class="hljs-number">10010</span>      <span class="hljs-number">100010</span><br></code></pre></td></tr></table></figure><h4 id="减法运算">3.减法运算</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; a<span class="hljs-number">-1</span><br><br><span class="hljs-built_in">ans</span> =<br><br>           <span class="hljs-number">0</span>           <span class="hljs-number">9</span>          <span class="hljs-number">99</span>         <span class="hljs-number">999</span>        <span class="hljs-number">9999</span>       <span class="hljs-number">99999</span><br></code></pre></td></tr></table></figure><h4 id="乘法运算">4.乘法运算</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; a*<span class="hljs-number">5</span><br><br><span class="hljs-built_in">ans</span> =<br><br>           <span class="hljs-number">5</span>          <span class="hljs-number">50</span>         <span class="hljs-number">500</span>        <span class="hljs-number">5000</span>       <span class="hljs-number">50000</span>      <span class="hljs-number">500000</span><br></code></pre></td></tr></table></figure><h4 id="除法运算">5.除法运算</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; a=[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>];<br>&gt;&gt; a/<span class="hljs-number">2</span><br><br><span class="hljs-built_in">ans</span> =<br><br>    <span class="hljs-number">0.5000</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">1.5000</span>    <span class="hljs-number">2.0000</span>    <span class="hljs-number">2.5000</span><br></code></pre></td></tr></table></figure><h4 id="混合运算">6.混合运算</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; a*<span class="hljs-number">5</span>+<span class="hljs-number">1</span><br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">6</span>    <span class="hljs-number">11</span>    <span class="hljs-number">16</span>    <span class="hljs-number">21</span>    <span class="hljs-number">26</span><br></code></pre></td></tr></table></figure><h3 id="二点积">（二）点积</h3><p>MAT中实现<strong>点积</strong>有两种方法，即<code>a*b</code>和调用函数<code>dot</code>进行计算</p><p><code>dot</code>的调用格式分以下两种:</p><ul><li><p><code>C = dot(a,b)</code></p><ul><li><p>如果 <code>A</code> 和 <code>B</code>是向量，则它们的长度必须相同</p></li><li><p>如果 <code>A</code> 和 <code>B</code>为矩阵或多维数组，则它们必须具有相同大小。在本例中，<code>dot</code>函数将 <code>A</code> 和 <code>B</code>视为向量集合。该函数计算对应向量沿大小不等于 1的第一个数组维度的叉积</p></li></ul></li><li><p><code>C = dot(a,b,dim)</code></p><ul><li>返回向量<strong>a</strong>和<strong>b</strong>在<strong>dim</strong>维的点积</li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; A = [<span class="hljs-number">4</span> <span class="hljs-number">-1</span> <span class="hljs-number">2</span>];<br>B = [<span class="hljs-number">2</span> <span class="hljs-number">-2</span> <span class="hljs-number">-1</span>];<br>&gt;&gt; C = <span class="hljs-built_in">dot</span>(A,B)<br><br>C =<br><br>     <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>C = A(1)<em>B(1) + A(2)</em>B(2) + A(3)*B(3)</p><h3 id="三叉积">（三）叉积</h3><p>空间解析几何中，两向量叉积后得到的是一个垂直于过交点且垂直于两向量平面的法向量，在MAT中我们使用<code>cross</code>来实现。</p><p><code>cross</code>的调用也分以下两种:</p><ul><li><code>C=cross(a,b)</code><ul><li>如果 <code>A</code> 和 <code>B</code>为向量，则它们必须是三维的</li><li>如果 <code>A</code> 和 <code>B</code>为矩阵或多维数组，则它们必须具有相同大小。在这种情况下，<code>cross</code>函数将 <code>A</code> 和 <code>B</code>视为三元素向量集合。该函数计算对应向量沿大小等于 3的第一个数组维度的叉积</li></ul></li><li><code>C=cross(a,b,dim)</code><ul><li>计算数组 <code>A</code> 和 <code>B</code> 沿维度 <code>dim</code>的叉积。<code>A</code> 和 <code>B</code> 必须具有相同的大小，并且<code>size(A,dim)</code> 和 <code>size(B,dim)</code> 必须为3。<code>dim</code> 输入是一个正整数标量</li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; A = [<span class="hljs-number">4</span> <span class="hljs-number">-2</span> <span class="hljs-number">1</span>];<br>B = [<span class="hljs-number">1</span> <span class="hljs-number">-1</span> <span class="hljs-number">3</span>];<br>&gt;&gt; C = <span class="hljs-built_in">cross</span>(A,B)<br><br>C =<br><br>    <span class="hljs-number">-5</span>   <span class="hljs-number">-11</span>    <span class="hljs-number">-2</span><br></code></pre></td></tr></table></figure><h3 id="四混合积">（四）混合积</h3><p>线性代数告诉我们向量的混合积是由<spanclass="math inline">\(\vec{a}\)</span>和<spanclass="math inline">\(\vec{b}\)</span>的<strong>叉积</strong>结果向量再<strong>点乘</strong><spanclass="math inline">\(\vec{c}\)</span>，MAT中向量的混合积运算可以由以上的两个函数<code>(dot,cross)</code>共同来实现,格式为<code>dot(a,cross(b,c))</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; a=[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> ];<br>&gt;&gt; b=[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span>];<br>&gt;&gt; c=[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span>];<br>&gt;&gt; d=<span class="hljs-built_in">dot</span>(a,<span class="hljs-built_in">cross</span>(b,c))<br><br>d =<br><br>     <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr /><h1 id="多项式">多项式</h1><h2 id="一多项式的创建">一、多项式的创建</h2><p>这个。。。废话不多说，直接输入呗😉</p><p>例如代数式a*x<sup>2</sup></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; a*x.^n<br></code></pre></td></tr></table></figure><h1 id="矩阵">矩阵</h1><h2 id="一矩阵定义">（一）矩阵定义</h2><p>MAT以矩阵作为数据操作的基本单位，矩阵是由m*n个数a<sub>ij</sub>(i=1,2,.....,m;j=1,2,3......m)排成的m行n列数表</p><p>记作： <span class="math display">\[A = \left[ \begin{matrix} a11 &amp; a12 &amp; ...&amp; a1n\\ a21 &amp;a22 &amp; ... &amp; a2n \\... &amp; ... &amp;...&amp; ... \\ am1 &amp;am2 &amp; ...  &amp; amn \end{matrix} \right]\]</span>称为m*n矩阵，也可以记作a<sub>ij</sub>或A<sub>mn</sub>，其中<strong>i</strong>表示行数，<strong>j</strong>表是列数，若m=n那么改矩阵又被称之为<strong>n</strong>阶方阵</p><p>ok介绍完毕，线代的内容可自行翻书(≧▽≦q)</p><p>使用矩阵的第一步就是创建矩阵，形式如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; a=[<span class="hljs-number">15</span> <span class="hljs-number">15</span> <span class="hljs-number">15</span>;<span class="hljs-number">14</span> <span class="hljs-number">14</span> <span class="hljs-number">14</span>; <span class="hljs-number">13</span> <span class="hljs-number">13</span> <span class="hljs-number">13</span>]<br><br>a =<br><br>    <span class="hljs-number">15</span>    <span class="hljs-number">15</span>    <span class="hljs-number">15</span><br>    <span class="hljs-number">14</span>    <span class="hljs-number">14</span>    <span class="hljs-number">14</span><br>    <span class="hljs-number">13</span>    <span class="hljs-number">13</span>    <span class="hljs-number">13</span><br></code></pre></td></tr></table></figure><p>行之间用<strong>；</strong>隔开，列之间用<strong>空格</strong>隔开，整体要用<code>[]</code>包括</p><p>补充一点在矩阵的输入过程中，每一行加上<code>[]</code>也是合法的，但是整体一定不要漏掉中括号</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; a=[[<span class="hljs-number">15</span> <span class="hljs-number">15</span> <span class="hljs-number">15</span>];[<span class="hljs-number">14</span> <span class="hljs-number">14</span> <span class="hljs-number">14</span>]; <span class="hljs-number">13</span> <span class="hljs-number">13</span> <span class="hljs-number">13</span>]<br><br>a =<br><br>    <span class="hljs-number">15</span>    <span class="hljs-number">15</span>    <span class="hljs-number">15</span><br>    <span class="hljs-number">14</span>    <span class="hljs-number">14</span>    <span class="hljs-number">14</span><br>    <span class="hljs-number">13</span>    <span class="hljs-number">13</span>    <span class="hljs-number">13</span><br></code></pre></td></tr></table></figure><p>创建一个<strong>复数</strong>矩阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; A=[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>+<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>+<span class="hljs-number">2</span><span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>]<br><br>A =<br><br>   <span class="hljs-number">1.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0000</span> + <span class="hljs-number">1.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">2.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span><br>   <span class="hljs-number">2.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.0000</span> + <span class="hljs-number">2.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span><br></code></pre></td></tr></table></figure><h2 id="二矩阵的生成">（二）矩阵的生成</h2><p>以上介绍了矩阵通过直接输入的方式来生成，以下介绍两种：利用M文件生成法和文本文件生成法</p><h3 id="利用m文件生成法">1.利用M文件生成法</h3><p>该方法主要适用于当矩阵的规模比较大的时候，直接输入法显得笨拙</p><p>第一，创建一个脚本文件，记好文件名（这里我用的文件名为<strong>Untitled3</strong>），在改=该文件里创建一个矩阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%Untitled3</span><br><span class="hljs-comment">%创建一个名为gmatrix的矩阵</span><br>gmatrix=[<span class="hljs-number">132</span> <span class="hljs-number">34</span> <span class="hljs-number">23</span> <span class="hljs-number">4</span> <span class="hljs-number">54</span> <span class="hljs-number">34</span> ;<span class="hljs-number">12</span> <span class="hljs-number">34</span> <span class="hljs-number">56</span> <span class="hljs-number">23</span> <span class="hljs-number">23</span> <span class="hljs-number">14</span>; <span class="hljs-number">143</span> <span class="hljs-number">14</span> <span class="hljs-number">34</span> <span class="hljs-number">56</span> <span class="hljs-number">23</span> <span class="hljs-number">34</span>;<span class="hljs-number">143</span> <span class="hljs-number">23</span> <span class="hljs-number">56</span> <span class="hljs-number">34</span> <span class="hljs-number">26</span> <span class="hljs-number">343</span>];<br></code></pre></td></tr></table></figure><p>第二，右键点中文件，<strong>运行</strong>该文件，在MAT的命令窗口输入<strong>文件名</strong>和<strong>矩阵名</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; Untitled3<br>&gt;&gt; gmatrix<br></code></pre></td></tr></table></figure><p>随后便得到以下结果</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">gmatrix =<br><br>   <span class="hljs-number">132</span>    <span class="hljs-number">34</span>    <span class="hljs-number">23</span>     <span class="hljs-number">4</span>    <span class="hljs-number">54</span>    <span class="hljs-number">34</span><br>    <span class="hljs-number">12</span>    <span class="hljs-number">34</span>    <span class="hljs-number">56</span>    <span class="hljs-number">23</span>    <span class="hljs-number">23</span>    <span class="hljs-number">14</span><br>   <span class="hljs-number">143</span>    <span class="hljs-number">14</span>    <span class="hljs-number">34</span>    <span class="hljs-number">56</span>    <span class="hljs-number">23</span>    <span class="hljs-number">34</span><br>   <span class="hljs-number">143</span>    <span class="hljs-number">23</span>    <span class="hljs-number">56</span>    <span class="hljs-number">34</span>    <span class="hljs-number">26</span>   <span class="hljs-number">343</span><br></code></pre></td></tr></table></figure><p>注意：M文件中的变量名（矩阵名）不能和文件名相同，这样会使得变量名和函数名的混乱</p><h3 id="利用文本创建">2.利用文本创建</h3><p>第一步，在MAT的路径文件夹里创建一个<strong>txt</strong>文件，这里起名叫**files1，并在文件内输入矩阵的元素，并保存</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>第二步，在MAT的命令框里输入</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; load file1.txt<br>&gt;&gt; file1<br><br>file1 =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span><br>     <span class="hljs-number">4</span>     <span class="hljs-number">5</span>     <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>注意：在创建txt文件时，一定要确保文件处于MAT的当前目录文件夹下，否则无法运行</p><h2 id="三创建特殊矩阵">（三）创建特殊矩阵</h2><ul><li>零矩阵:<ul><li><p>zeros(m): 产生m*m零矩阵</p></li><li><p>zeros(m,n): 产生m*n零矩阵</p></li><li><p>zeros(size(A)): 产生与矩阵A同样大小的零矩阵</p></li></ul></li><li>全1矩阵:<ul><li><p>ones(m: 产生mm全1矩阵</p></li><li><p>ones(m,n): 产生mn全1矩阵</p></li><li><p>ones(size(A)): 产生与矩阵A同样大小的全1矩阵</p></li></ul></li><li>对角线为1的矩阵:<ul><li>eye(m):产生mm的单位矩阵</li><li>eye(m,n):产生mn的对角线为1的矩阵</li><li>eye(size(A)):产生与矩阵A同样大小的对角线为1矩阵</li></ul></li><li>随机矩阵:<ul><li>rand(m):产生mm的(0,1)区间里均匀分布的随机矩阵</li><li>randn(m):产生mm的均值为0，方差为1的标准正态分布随机矩阵</li></ul></li><li>魔方矩阵:<ul><li>magic(m):产生m阶的魔方矩阵</li></ul></li><li>范德蒙矩阵:<ul><li>vander(V):产生以V为基础的范德蒙矩阵</li></ul></li><li>希尔伯特矩阵:<ul><li>Hilb(V):产生以V为基础的希尔伯特矩阵</li></ul></li><li>伴随矩阵:<ul><li>compan§:产生以p为基础的伴随矩阵。其中p是多项式的向量</li></ul></li><li>帕斯卡矩阵:<ul><li>pascal(n):生成一个n阶帕斯卡矩阵</li></ul></li></ul><h2 id="四矩阵元素的运算">（四）矩阵元素的运算</h2><p>矩阵中的元素和向量中的元素一样，也可以抽取引用、编辑修改等操作（这句话是套话）😊</p><h3 id="矩阵元素的修改">1.矩阵元素的修改</h3><p>在建立一个矩阵后，要使用一些语句对矩阵进行修改</p><table><thead><tr class="header"><th style="text-align: center;">命令</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>D=[A;B C]</code></td><tdstyle="text-align: center;">A为原矩阵，B，C中包含要扩充的元素，D为扩充后的矩阵</td></tr><tr class="even"><td style="text-align: center;"><code>A(m,:) = [ ]</code></td><td style="text-align: center;">删除A的第m行</td></tr><tr class="odd"><td style="text-align: center;"><code>A(;,n)=[]</code></td><td style="text-align: center;">删除A的第n列</td></tr><tr class="even"><tdstyle="text-align: center;"><code>A(m,n)=a;A(m,:)=[a,b...];A(:,n)=[a b...]</code></td><td style="text-align: center;">对A的第m行以及第n列赋值</td></tr></tbody></table><p>其他的都通俗易懂，下面用代码解释一下<strong>命令1</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; A=[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> ; <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>];<br>&gt;&gt; B=<span class="hljs-built_in">eye</span>(<span class="hljs-number">2</span>);<br>&gt;&gt; C=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br>&gt;&gt; D=[A;B C]<br><br>D =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span><br>     <span class="hljs-number">4</span>     <span class="hljs-number">5</span>     <span class="hljs-number">6</span><br>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="矩阵的变维">2.矩阵的变维</h3><p>矩阵的变维有两种方法：<code>:</code>法和<code>reshape</code>的函数法。调用格式：<code>reshape(X,m,n):</code>将已知的矩阵变维成<strong>m</strong>行<strong>n</strong>列的矩阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; A=[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11</span>;<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>] ;<br>&gt;&gt; B=<span class="hljs-built_in">reshape</span>(A,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>)     <span class="hljs-comment">%变为2×6矩阵  </span><br><br>B =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     <span class="hljs-number">5</span>     <span class="hljs-number">7</span>     <span class="hljs-number">9</span>    <span class="hljs-number">11</span><br>     <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">6</span>     <span class="hljs-number">8</span>    <span class="hljs-number">10</span>    <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>这里2或6可以用<code>[]</code>代替，然后系统自动会计算出<code>[]</code>的值</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; B=<span class="hljs-built_in">reshape</span>(A,[],<span class="hljs-number">6</span>)        <span class="hljs-comment">%用[]代替其中一个维度  </span><br>B =  <br> <br>     <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     <span class="hljs-number">5</span>     <span class="hljs-number">7</span>     <span class="hljs-number">9</span>    <span class="hljs-number">11</span>  <br>     <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">6</span>     <span class="hljs-number">8</span>    <span class="hljs-number">10</span>    <span class="hljs-number">12</span>  <br></code></pre></td></tr></table></figure><h3 id="矩阵变向">3.矩阵变向</h3><table><thead><tr class="header"><th style="text-align: center;">命令</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>Rot(90)</code></td><td style="text-align: center;">将A逆时针方向旋转90°</td></tr><tr class="even"><td style="text-align: center;"><code>Rot(90,k)</code></td><tdstyle="text-align: center;">将A逆时针方向旋转90*k°，k为正整数或负整数</td></tr><tr class="odd"><td style="text-align: center;"><code>Fliplr(X)</code></td><td style="text-align: center;">将X左右翻转</td></tr><tr class="even"><td style="text-align: center;"><code>flipud(X)</code></td><td style="text-align: center;">将X上下翻转</td></tr><tr class="odd"><td style="text-align: center;"><code>flipdim(X,dim)q</code></td><td style="text-align: center;">dim=1时对行翻转，dim=2时对列翻转</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MATLAB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python自学</title>
    <link href="/2021/10/10/Python%E8%87%AA%E5%AD%A6/"/>
    <url>/2021/10/10/Python%E8%87%AA%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>Python——万物皆对象</p><span id="more"></span><h1 id="一print输出数字字符和表达式">一、print输出数字字符和表达式</h1><h2 id="print输出字符">print输出字符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>)  <span class="hljs-comment"># 加引号进行原样输</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)=<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello  world&quot;</span>)<br><span class="hljs-comment">#在python中print后的单引号和双引号作用相同。鉴于总体建议仍然使用双引号</span><br></code></pre></td></tr></table></figure><p>print的引号里内容总保证原样输出的状态，这一点和c语言保证一致</p><h2 id="print输出表达式">print输出表达式</h2><p>对于需要计算机执行的表达式或运算符这里不用加<strong>引号</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span>+<span class="hljs-number">2</span>)  <br></code></pre></td></tr></table></figure><p>输出：<strong>5</strong></p><h4 id="拓展">拓展</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>-<span class="hljs-number">3</span>)<span class="hljs-comment"># 输出-1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">4</span>*<span class="hljs-number">5</span>)<span class="hljs-comment"># 输出20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">4</span>/<span class="hljs-number">5</span>)<span class="hljs-comment"># 输出0.8</span><br></code></pre></td></tr></table></figure><p>输出：-1<br />输出：20<br />输出：0.8<br />由此可见python在某些计算中无需像C语言那样规定数据的类型，操作简便许多、代码的可读性也更强。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;因为考试复习，暂时再见，see  you!&quot;</span>)<br></code></pre></td></tr></table></figure><p>先说一下，考试考完了，祝我不挂吧！</p><h3 id="print输出不同的字符类型">（4）print输出不同的字符类型</h3><h4 id="二进制型">二进制型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">0b101110111</span>)  <span class="hljs-comment"># 输出二进制数，二进制0b开头且后面为0和1组成</span><br></code></pre></td></tr></table></figure><p>输出：<br /><img src="https://img-blog.csdnimg.cn/20210701164727694.png"alt="在这里插入图片描述" /><br />不难看出在print内输入一个二进制数，计算机会将其自动翻译为十进制数输出。#### 八进制和十六进制数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">0o17064</span>)  <span class="hljs-comment"># 输出十进制数，八进制以0o开头且后面为0~7的数组成</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0x123eaf</span>)  <span class="hljs-comment"># 输出十六进制数，十六进制由ox开头且后面由0~9和a~f组成</span><br></code></pre></td></tr></table></figure><p>输出：<br /><img src="https://img-blog.csdnimg.cn/20210701194554196.png"alt="在这里插入图片描述" /><br />与上面的二进制的情况类似，计算机会自动翻译成十进制数输出。 ###（5）用打印变量类型 利用内置函数——<strong>type</strong> 例如： (1)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">f1 = <span class="hljs-literal">True</span><br>f2 = <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(f1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(f2))  <span class="hljs-comment"># 通过内置函数type来打印出f1和f2的类型都是布尔型</span><br></code></pre></td></tr></table></figure> 输出：<br /><img src="https://img-blog.csdnimg.cn/20210701195459193.png"alt="变量类型为布尔" /><br />得到变量<strong>f1</strong>和<strong>f2</strong>为布尔型 (2)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">1.0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))<br></code></pre></td></tr></table></figure> 输出：<br /><img src="https://img-blog.csdnimg.cn/2021070120024643.png"alt="在这里插入图片描述" /><br />得到变量<strong>a</strong>和<strong>b</strong>的类型为整形和浮点型</p><p>###（5）字符串与函数混搭输出 如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">things = [food, clothes, city]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;列表的长度:&quot;</span>, <span class="hljs-built_in">len</span>(things)) <span class="hljs-comment"># 中间用逗号连接</span><br></code></pre></td></tr></table></figure><p>输出：<br /><imgsrc="https://img-blog.csdnimg.cn/57dc647c538a4c43b9722ead940c2691.png"alt="在这里插入图片描述" /><br />这里<strong>len</strong>作为一个函数——测量列表长度，这里字符串“<strong>列表的长度</strong>”和函数表达式<strong>len</strong>一次性输出，中间借助逗号连接，输出结果如上图👆。</p><h1 id="二转义字符">二、转义字符</h1><h2 id="常见的转义字符">常见的转义字符</h2><h3 id="转义字符">（1）转义字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;helloo\thello&quot;</span>)  <span class="hljs-comment"># \t前有五个字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;helloooo\thello&quot;</span>) <span class="hljs-comment"># \t前有八个字符</span><br></code></pre></td></tr></table></figure><p>输出：<br /><img src="https://s2.loli.net/2022/06/01/zdyaujFk67nTIKL.png" /><br />显而易见第一个print中间三个空格，而第二个只有一个空格，原因在于<strong>也叫水平制表符，即将字符每四个一分组，第一个</strong>print<strong>:在这里前面的o已经在里面了，所以除去o还要空三列。第二个</strong>print**：前面的的“ooo”已经占三列，所以这里除去三列还剩下一列，则空一列。</p><h3 id="转义字符--code10--">（2）转义字符!--code￼10--&gt;</h3><p>输出：<br /><img src="https://img-blog.csdnimg.cn/20210618133615729.png"alt="在这里插入图片描述" /></p><p>显而易见'o'不见了原因是：**为退格运算符，使光标从当前位置向前移动一个位置最终输出为"hellworld"</p><h3 id="转义字符-1">(3)转义字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello\nworld&quot;</span>) <br></code></pre></td></tr></table></figure><p>输出：<br /><img src="https://s2.loli.net/2022/06/01/YwfkgQB6Epme15j.png"alt="在这里插入图片描述" /><br />***是日常最熟悉的换行符，与C语言中的作用一致，这里就不过多赘述了。</p><h3 id="字符的输出">（4)   ” ‘ 字符的输出</h3><p>三者是编程里较为敏感的字符，用通常的方法则不能输出，需要借助'\'</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\&quot;&quot;</span>)  <span class="hljs-comment"># 输出双引号</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\&#x27;&quot;</span>)  <span class="hljs-comment"># 输出单引号</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\\&quot;</span>)  <span class="hljs-comment"># 输出斜杠</span><br></code></pre></td></tr></table></figure><p>输出:<br /><img src="https://s2.loli.net/2022/06/01/CfzcLF2o3R5nMKh.png"alt="在这里插入图片描述" /><br />但是注意，一个 ' " 的输出起作用<br />例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;http :\\\\www.baidu.com&quot;</span>)  <span class="hljs-comment"># 实际输出的为第二第四个反斜杠</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;老师说：\&quot;大家好\&quot;&quot;</span>) <span class="hljs-comment"># 输出大家后左右两旁的引号</span><br></code></pre></td></tr></table></figure><p>输出：<br /><img src="https://img-blog.csdnimg.cn/20210618135425963.png"alt="在这里插入图片描述" /></p><h3 id="其他转义字符附表">其他转义字符（附表）</h3><figure><imgsrc="https://img-blog.csdnimg.cn/20210619011920921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzU2ODgxNDYz,size_16,color_FFFFFF,t_70"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><h1 id="三列表">三、列表</h1><h2 id="一列表是什么">一、列表是什么</h2><p>列表由一系列特定顺序排列的元素组成。说白了Python里的列表就是C语言里的字符串。<strong>例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">bicycles = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br></code></pre></td></tr></table></figure><p>如以上列表，bicycles表示列表的名字，而其中的 "<strong>a</strong>","<strong>b</strong>", "<strong>c</strong>",表示的是该列表里的元素。 ##二、列表元素的访问 还举上个列表的例子，这里要求输出指定元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">bicycles = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br><span class="hljs-built_in">print</span>(bicycles[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure>bicycles[0]表示这个这个列表中的第一个元素，所以这里相当于用特定的序号来代替元素。这里的”序号“<strong>0</strong>，被称为Python列表里的<strong>索引</strong>。## 三、对列表中元素的调用给出一个列表，我们在打印输出的时候需要调用到列表中的某些元素，应该怎么办呢？举例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">car = [<span class="hljs-string">&quot;benz&quot;</span>, <span class="hljs-string">&quot;bmw&quot;</span>, <span class="hljs-string">&quot;audi&quot;</span>]<br>message = <span class="hljs-string">f&quot;My brother wants an <span class="hljs-subst">&#123;car[<span class="hljs-number">2</span>]&#125;</span>&quot;</span><br><span class="hljs-built_in">print</span>(message)<br></code></pre></td></tr></table></figure><p>输出： <img src="https://s2.loli.net/2022/06/01/MpnyGPBf9d1jNUL.png"alt="在这里插入图片描述" />这里就实现调用了，将列表中的"<strong>audi</strong>"元素，通过索引——<strong>car[2]</strong>,调用，不过注意<strong>messsage</strong>中字符串混入变量（car[2])需要用到{ }，前面已经提到过。</p><h2 id="四列表元素的修改添加和删除">四、列表元素的修改、添加和删除</h2><h3 id="修改列表元素">1.修改列表元素</h3><p>利用列表<strong>索引</strong>将列表中的元素通过直接替换的方式来定向改变列表中的元素。<strong>例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">car = [<span class="hljs-string">&quot;benz&quot;</span>, <span class="hljs-string">&quot;bmw&quot;</span>, <span class="hljs-string">&quot;audi&quot;</span>]<br>car[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Toyota&quot;</span> <span class="hljs-comment"># 直接选中第一个元素并替换实现定向改变</span><br><span class="hljs-built_in">print</span>(car)<br></code></pre></td></tr></table></figure><p>输出： <img src="https://s2.loli.net/2022/06/01/6MweZVYjtxFkvAl.png"alt="在这里插入图片描述" /></p><h3 id="在列表中添加元素">2.在列表中添加元素</h3><h4 id="在列表末尾添加元素">（1）在列表末尾添加元素</h4><p>利用.<strong>append</strong>（）后缀将新元素添加到列表末尾，括号里面吗填要添加的元素，注意后缀不要忘了加。结构为：<strong>列表名.append("新元素”）</strong><strong>例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">car = [<span class="hljs-string">&quot;benz&quot;</span>, <span class="hljs-string">&quot;bmw&quot;</span>, <span class="hljs-string">&quot;audi&quot;</span>]<br><span class="hljs-built_in">print</span>(car)<br>car.append(<span class="hljs-string">&quot;toyota&quot;</span>)<br><span class="hljs-built_in">print</span>(car)<br></code></pre></td></tr></table></figure><p>输出： <img src="https://s2.loli.net/2022/06/01/zfJmud24tGU7YbC.png"alt="在这里插入图片描述" /></p><h4 id="在列表中插入元素">（2）在列表中插入元素</h4><p>利用<strong>insert</strong>（，）可以在列表的任何位置插入新元素，所以括号里的两个空，一个表示插入新元素的位置即<strong>索引序号</strong>，另一个表示插入的<strong>元素值</strong>结构为：<strong>列表名.insert(索引，”新元素“）</strong><strong>例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">car = [<span class="hljs-string">&quot;benz&quot;</span>, <span class="hljs-string">&quot;bmw&quot;</span>, <span class="hljs-string">&quot;audi&quot;</span>]<br>car.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;toyota&quot;</span>)<br><span class="hljs-built_in">print</span>(car)<br></code></pre></td></tr></table></figure><p>输出： <img src="https://img-blog.csdnimg.cn/20210713015247455.png"alt="在这里插入图片描述" />显而易见，将新元素<strong>toyota</strong>插入在索引1号位置，原索引1号及其之后的元素挨个往后平移一格。</p><h3 id="从列表中删除元素">3.从列表中删除元素</h3><h4 id="使用-del-语句删除元素">(1)使用 del 语句删除元素</h4><p>这里和之前的<strong>insert</strong>正好相反，在已知执行元素索引的情况下，直接定向的删除该元素。结构为：<strong>del 列表名[索引]</strong> <strong>例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">car = [<span class="hljs-string">&quot;benz&quot;</span>, <span class="hljs-string">&quot;bmw&quot;</span>, <span class="hljs-string">&quot;audi&quot;</span>]<br><span class="hljs-keyword">del</span> car[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(car)<br></code></pre></td></tr></table></figure><p>输出： <img src="https://s2.loli.net/2022/06/01/5dFVBuWbeZn8PvY.png"alt="在这里插入图片描述" /></p><h4 id="使用pop-删除元素">(2.1)使用pop( )删除元素</h4><p>pop( ）也是用来删除列表<strong>末尾</strong>中的元素，但是要比<strong>del</strong> 多出一个功能就是，删除之后并且可以让你接着使用它。结构为：<strong>列表名 .pop()</strong> <strong>例：</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">car = [<span class="hljs-string">&quot;benz&quot;</span>, <span class="hljs-string">&quot;bmw&quot;</span>, <span class="hljs-string">&quot;audi&quot;</span>]<br>car2 = car.pop() <span class="hljs-comment"># 这里实质上是两部运算，一次弹出末尾元素，其次将末尾元素赋值给car2</span><br><span class="hljs-built_in">print</span>(car)<br><span class="hljs-built_in">print</span>(car2)<br></code></pre></td></tr></table></figure> 输出： <imgsrc="https://s2.loli.net/2022/06/01/asL8R21NZXUiIbe.png"alt="在这里插入图片描述" />显而易见这里利用car,pop()赋值给一个变量(car2)，将car列表末尾元素（audi)删除并将删除元素赋值给变量(car2)。</p><h4 id="弹出列表中任何位置的元素">（2.2）弹出列表中任何位置的元素</h4><p>这里是对pop的一个补充，上文中说到的pop只是针对于列表末尾元素，这里如果将pop()括号里加上索引，就可以自由的对列表中的任何元素进行如上操作。结构为：<strong>变量名 = 列表名.pop(索引）</strong><strong>例：</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">car = [<span class="hljs-string">&quot;benz&quot;</span>, <span class="hljs-string">&quot;bmw&quot;</span>, <span class="hljs-string">&quot;audi&quot;</span>]<br>car2 = car.pop(<span class="hljs-number">1</span>) <br><span class="hljs-built_in">print</span>(car)<br><span class="hljs-built_in">print</span>(car2)<br></code></pre></td></tr></table></figure> 输出： <imgsrc="https://s2.loli.net/2022/06/01/Mo7pzCquKvEnjSH.png"alt="在这里插入图片描述" />显而易见，这里将列表<strong>索引1</strong>位置的元素弹出并赋值给变量car2。</p><h4 id="根据值删除元素">（3）根据值删除元素</h4><p>以上的修改列表中的元素都是已知该元素索引的情况下进行的，如果我们仅仅知道要删除元素的值，就需要借助<strong>remove()</strong>。结构为：<strong>列表名.remove("元素名“）</strong> 例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">car = [<span class="hljs-string">&quot;benz&quot;</span>, <span class="hljs-string">&quot;bmw&quot;</span>, <span class="hljs-string">&quot;audi&quot;</span>]<br>car.remove(<span class="hljs-string">&quot;benz&quot;</span>)<br><span class="hljs-built_in">print</span>(car)<br></code></pre></td></tr></table></figure><p>输出：<br /><img src="https://s2.loli.net/2022/06/01/71RLr6PNBgdof4u.png"alt="在这里插入图片描述" />由此可见，可以先将执行元素赋值给变量，然后<strong>remove</strong>可以对该变量进行执行；也可以直接对元素执行，不过这里注意元素要写成变量形式，所以不要忘了<strong>引号</strong></p><h3 id="组织列表">4.组织列表</h3><h4id="使用方法sort对列表永久排序">（1）使用方法sort()对列表永久排序</h4><p>利用sorted对列表按字符串<strong>从小到大</strong>进行排序，且这种排序得到一个新列表是<strong>永久性</strong>的，只有对该列表<strong>重新赋值</strong>才可改变结构为：<strong>列表名.sort()</strong>顺序：这里的顺序是通过比较列表内元素的大小（从首字母往后按照<strong>ASCLL码</strong>的大小进行比较），例如，1&lt; 2, boy &lt; bpy <strong>例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">car = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br>car.sort()<br><span class="hljs-built_in">print</span>(car)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[1,2,4]</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l_ist =[<span class="hljs-string">&quot;fireman &quot;</span>, <span class="hljs-string">&quot;doctor&quot;</span>, <span class="hljs-string">&quot;receptionist&quot;</span>, <span class="hljs-string">&quot;programmer&quot;</span>, <span class="hljs-string">&quot;saleswoman &quot;</span>, <span class="hljs-string">&quot;publisher&quot;</span>]<br>l_ist.sort()<br><span class="hljs-built_in">print</span>(l_ist)<br></code></pre></td></tr></table></figure><p>输出： <img src="https://s2.loli.net/2022/06/01/AHXyhPTx256rInS.png"alt="在这里插入图片描述" />若想通过从大到小倒序（<strong>顺序倒序</strong>）排列，只需要在sort()括号里输入reverse=True，即l_st.sort(reverse=True） 输出： <imgsrc="https://s2.loli.net/2022/06/01/HmSXPYWdRn7rUgQ.png"alt="在这里插入图片描述" /></p><h4id="使用函数sorted对列表临时排序">（2）使用函数sorted（）对列表临时排序</h4><p>临时排序不同于永久排序，也就是说排序的生存期仅限于该语句结构：<strong>sorted(列表名）</strong> 举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">l_ist = [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>]<br><span class="hljs-built_in">sorted</span>(l_ist)<br><span class="hljs-built_in">print</span>(l_ist) <span class="hljs-comment"># 先排序后输出（无）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(l_ist)) <span class="hljs-comment"># 直接排序输出（有）</span><br></code></pre></td></tr></table></figure><p>输出： <img src="https://img-blog.csdnimg.cn/20210713174654632.png"alt="在这里插入图片描述" />对比以上两个输出结果可以发现，第二行的sorted(l_ist)对列表进行排序，而在第三行打印输出的适合顺序又还原了，而第四行排序后直接进行打印输出顺序还在，对比可见，<strong>sorted（)</strong>的排序属于<strong>临时性</strong>的。</p><h4 id="利用reverse对列表倒序">(3)利用reverse()对列表倒序</h4><p>这里的倒序是指单单将原列表顺序颠倒，其余都没有改变结构：<strong>列表名.reverse()</strong> 举例： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>]<br>a.reverse()<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure> 输出：<img src="https://s2.loli.net/2022/06/01/AkNOucqeMEr34Hi.png"alt="在这里插入图片描述" /></p><h4 id="确定列表长度">(4)确定列表长度</h4><p>使用函数len()可以快速确定列表的长度（<strong>元素个数</strong>）结构：<strong>len(列表名）</strong> <strong>例:</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l_ist = [<span class="hljs-string">&quot;fireman &quot;</span>, <span class="hljs-string">&quot;doctor&quot;</span>, <span class="hljs-string">&quot;receptionist&quot;</span>, <span class="hljs-string">&quot;programmer&quot;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(l_ist)) <br><span class="hljs-comment"># len只是一个函数自身不具有输出功能需要用print才能看出具体长度</span><br></code></pre></td></tr></table></figure>输出： <img src="https://s2.loli.net/2022/06/01/LhdpVu7lof6KzNM.png"alt="在这里插入图片描述" /> 即表明列表的长度或元素个数为4</p><h1 id="四字典">四、字典</h1><h2 id="一形式">一、形式：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">rivers = &#123;<br>    <span class="hljs-string">&quot;Níluóhé&quot;</span>: <span class="hljs-string">&quot;Egypt&quot;</span>,<br>    <span class="hljs-string">&quot;Yangtze River&quot;</span>: <span class="hljs-string">&quot;China&quot;</span>,<br>    <span class="hljs-string">&quot;Yellow River&quot;</span>: <span class="hljs-string">&quot;China&quot;</span>,<br>    <span class="hljs-string">&quot;Mississippi River&quot;</span>: <span class="hljs-string">&quot;USA&quot;</span>,<br>    <span class="hljs-string">&quot;Ganges&quot;</span>:<span class="hljs-string">&quot;India&quot;</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="二使用字典">二、使用字典</h2><h3 id="一访问字典中的值">（一）访问字典中的值</h3><h4 id="由键访问值">1.由键访问值</h4><p>例如对字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">color_like = &#123;<span class="hljs-string">&quot;boy&quot;</span>: <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;girl&quot;</span>: <span class="hljs-string">&quot;pink&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>要求输出字典中第二个键对应的值：<br />代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(color_like[<span class="hljs-string">&quot;girl&quot;</span>]) <span class="hljs-comment"># 输出 pink</span><br></code></pre></td></tr></table></figure><p>输出字典中的值形式为：<strong>字典名[键名]</strong>要求将值代入字符串中：<br />代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">color = color_like[<span class="hljs-string">&quot;girl&quot;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Girls’ favorite color is <span class="hljs-subst">&#123;color&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Girls’ favorite color <span class="hljs-keyword">is</span> pink<br></code></pre></td></tr></table></figure><h4 id="由值访问键">2.由值访问键</h4><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s = &#123;<span class="hljs-string">&quot;A&quot;</span>: <span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>: <span class="hljs-string">&quot;200&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(s.keys())[<span class="hljs-built_in">list</span>(s.values()).index(<span class="hljs-string">&quot;200&quot;</span>)])<br></code></pre></td></tr></table></figure><p>输出： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">B<br></code></pre></td></tr></table></figure>由此可见通过化列表找索引从而可以实现通过值访问键</p><h3 id="二在字典中添加键值对">（二）在字典中添加键值对</h3><h5id="字典是一种动态结构可以在里面随时添加键值对">字典是一种动态结构，可以在里面随时添加键值对</h5><p>仍然使用上述字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">color_like = &#123;<span class="hljs-string">&quot;boy&quot;</span>: <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;girl&quot;</span>: <span class="hljs-string">&quot;pink&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>要求在字典中添加一个<strong>键值对</strong>：<br />代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">color_like = &#123;<span class="hljs-string">&quot;boy&quot;</span>: <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;girl&quot;</span>: <span class="hljs-string">&quot;pink&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(color_like)<br>color_like[<span class="hljs-string">&quot;Soldier&quot;</span>] = <span class="hljs-string">&quot;green&quot;</span><br><span class="hljs-built_in">print</span>(color_like)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-string">&#x27;boy&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;girl&#x27;</span>: <span class="hljs-string">&#x27;pink&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;boy&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;girl&#x27;</span>: <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;Soldier&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>Clearly! 字典中新植入了一个键值对 ### （三）修改字典中的值仍是上述字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">color_like = &#123;<span class="hljs-string">&quot;boy&quot;</span>: <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;girl&quot;</span>: <span class="hljs-string">&quot;pink&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>要求把第一个键对应的值由"<strong>blue</strong>"改为"<strong>black</strong>":<br />代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">color_like[<span class="hljs-string">&quot;boy&quot;</span>] = <span class="hljs-string">&quot;black&quot;</span>  <span class="hljs-comment">#这里与添加值相似</span><br><span class="hljs-built_in">print</span>(color_like)<br></code></pre></td></tr></table></figure><p>输出： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-string">&#x27;boy&#x27;</span>: <span class="hljs-string">&#x27;black&#x27;</span>, <span class="hljs-string">&#x27;girl&#x27;</span>: <span class="hljs-string">&#x27;pink&#x27;</span>&#125;<br></code></pre></td></tr></table></figure>由此可见，"<strong>blue</strong>"已改为"<strong>black</strong>" ###（四）删除键值对 使用<strong>del</strong>语句将相应的键值对彻底删除仍然使用上述字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">color_like = &#123;<span class="hljs-string">&quot;boy&quot;</span>: <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;girl&quot;</span>: <span class="hljs-string">&quot;pink&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>要求删除键值对"<strong>boy</strong>"<strong>:</strong>"<strong>blue</strong>":</p><p>代码如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(color_like)<br><span class="hljs-keyword">del</span> color_like[<span class="hljs-string">&quot;boy&quot;</span>]<br><span class="hljs-built_in">print</span>(color_like)<br></code></pre></td></tr></table></figure> 输出： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-string">&#x27;boy&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;girl&#x27;</span>: <span class="hljs-string">&#x27;pink&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;girl&#x27;</span>: <span class="hljs-string">&#x27;pink&#x27;</span>&#125;<br></code></pre></td></tr></table></figure>通过对比，可见"<strong>boy</strong>"的键值对已经在字典中删除 ###（五）使用get( )来访问字典中的值 <strong>get</strong>()的优势在于，当用常规方法调用字典中的键时，如果指定的键不存在就会出错——显示traceback,指出存在keyError仍旧使用字典： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-string">&#x27;boy&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;girl&#x27;</span>: <span class="hljs-string">&#x27;pink&#x27;</span>&#125;<br></code></pre></td></tr></table></figure>如果这时候贸然打印一个不存在的键值，即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(color_like[<span class="hljs-string">&quot;young&quot;</span>])<br></code></pre></td></tr></table></figure><p>那么系统会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;E:/pycharm代码/text.py&quot;</span>, line <span class="hljs-number">523</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-built_in">print</span>(color_like[<span class="hljs-string">&quot;young&quot;</span>])<br>KeyError: <span class="hljs-string">&#x27;young&#x27;</span><br><span class="hljs-comment"># 指出存在键值错误（KeyError）</span><br></code></pre></td></tr></table></figure><p>如果借助<strong>get</strong>( )来打印输出的话，即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">color_like = &#123;<span class="hljs-string">&quot;boy&quot;</span>: <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;girl&quot;</span>: <span class="hljs-string">&quot;pink&quot;</span>&#125;<br>a = color_like.get(<span class="hljs-string">&quot;young&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p><strong>get</strong>( )的结构为：<strong>字典名</strong><strong>.get</strong>(A,B) "young"为第一个参数(A)用于指定键——必不可少"red"为第二个参数(B)用于指定键不存在时要返回的值——可理解为不存在的键对应的值</p><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">red  <span class="hljs-comment"># 返回参数 B（red)</span><br></code></pre></td></tr></table></figure><h3 id="in-addition">In addition</h3><p>常规情况下打印输出键值也可以使用<strong>get( )</strong><br />代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">color_like = &#123;<span class="hljs-string">&quot;boy&quot;</span>: <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;girl&quot;</span>: <span class="hljs-string">&quot;pink&quot;</span>&#125;<br>a = color_like.get(<span class="hljs-string">&quot;boy&quot;</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">blue<br></code></pre></td></tr></table></figure><h2 id="三遍历字典">三、遍历字典</h2><h5id="借助于for循环可以实现对字典中键值键和值的遍历">借助于for循环可以实现对字典中键、值、键和值的遍历</h5><h3 id="一遍历所有键值对">（一）遍历所有键值对</h3><h5 id="借助于-.item-作为后缀打印每个键以及对应的值">借助于.<strong>item</strong>( )作为后缀打印每个键以及对应的值</h5><p>要求依次同时打印出字典的键和对应的值：<br />代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">my_favorite = &#123;<br>    <span class="hljs-string">&quot;food&quot;</span>: <span class="hljs-string">&quot;bread&quot;</span>,<br>    <span class="hljs-string">&quot;clothes&quot;</span>: <span class="hljs-string">&quot;Hoodie&quot;</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Steven&quot;</span>,<br>    <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;HangZhou&quot;</span><br>&#125;<br><span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> my_favorite.items():  <span class="hljs-comment"># item表明打印出键和值</span><br>    <span class="hljs-comment"># a,b为储存键和值的变量</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;my favorite <span class="hljs-subst">&#123;a&#125;</span> is <span class="hljs-subst">&#123;b&#125;</span>!&quot;</span>)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">my favorite food <span class="hljs-keyword">is</span> bread!<br>my favorite clothes <span class="hljs-keyword">is</span> Hoodie!<br>my favorite name <span class="hljs-keyword">is</span> Steven!<br>my favorite city <span class="hljs-keyword">is</span> HangZhou!<br></code></pre></td></tr></table></figure><h3 id="二遍历字典中的所有键">（二）遍历字典中的所有键</h3><h5 id="这里借助-.keys-作为后缀打印输出每个键">这里借助 .keys()作为后缀打印输出每个键</h5><p>仍然使用以上字典： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">my_favorite = &#123;<br>    <span class="hljs-string">&quot;food&quot;</span>: <span class="hljs-string">&quot;bread&quot;</span>,<br>    <span class="hljs-string">&quot;clothes&quot;</span>: <span class="hljs-string">&quot;Hoodie&quot;</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Steven&quot;</span>,<br>    <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;HangZhou&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure> 要求依次打印出字典中的键：<br />代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> my_favorite.keys(): <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;a:<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a:food<br>a:clothes<br>a:name<br>a:city<br></code></pre></td></tr></table></figure><h3 id="三遍历字典中的所有值">（三）遍历字典中的所有值</h3><h5 id="这里借助-.values-作为后缀打印输出每个值">这里借助 .values()作为后缀打印输出每个值</h5><p>要求依次打印出字典中的值：<br />代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> my_favorite.values():  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;b:<span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">b:bread<br>b:Hoodie<br>b:Steven<br>b:HangZhou<br></code></pre></td></tr></table></figure><h2 id="四嵌套">四、嵌套</h2><h3 id="一列表中嵌套字典">（一）列表中嵌套字典</h3><p>例如，下面就是创建一个包含三个字典的列表<br />代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">our_favorite = [<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;Steven&quot;</span>, <span class="hljs-string">&quot;Jim&quot;</span>]<br>Tom_favorite = &#123;<span class="hljs-string">&quot;food&quot;</span>: <span class="hljs-string">&quot;beef&quot;</span>, <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;red&quot;</span>&#125;<br>Steven_favotite = &#123;<span class="hljs-string">&quot;food&quot;</span>: <span class="hljs-string">&quot;sandwich&quot;</span>, <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;blue&quot;</span>&#125;<br>Jim_favorite = &#123;<span class="hljs-string">&quot;food&quot;</span>: <span class="hljs-string">&quot;bread&quot;</span>, <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;black&quot;</span>&#125;<br><span class="hljs-keyword">for</span> somebody_favorite <span class="hljs-keyword">in</span> our_favorite:<br>    <span class="hljs-comment"># 遍历列表并打印输出各个字典a</span><br>    <span class="hljs-built_in">print</span>(somebody_favorite)<br></code></pre></td></tr></table></figure><h3 id="二字典中存储列表">（二）字典中存储列表</h3><p>以下就是字典中嵌入一个列表，列表整体在此作为一个键值<br />代码如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">pizza = &#123;<br>    <span class="hljs-string">&quot;crust&quot;</span>: <span class="hljs-string">&quot;thick&quot;</span>,<br>    <span class="hljs-string">&quot;topping&quot;</span>: [<span class="hljs-string">&quot;mushrooms&quot;</span>, <span class="hljs-string">&quot;extra cheese&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure> ### （三）字典中存储字典以下就是字典中嵌入字典，每一个嵌入字典在此都作为一个键值<br />代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">pizza_color = &#123;<br>    <span class="hljs-string">&quot;seasoning&quot;</span>: &#123;<span class="hljs-string">&quot;butter&quot;</span>: <span class="hljs-string">&quot;yello&quot;</span>,<br>                  <span class="hljs-string">&quot;pepper&quot;</span>: <span class="hljs-string">&quot;black&quot;</span>,<br>                  <span class="hljs-string">&quot;ketchup&quot;</span>: <span class="hljs-string">&quot;red&quot;</span><br>                  &#125;,<br>    <span class="hljs-string">&quot;tableware&quot;</span>: &#123;<span class="hljs-string">&quot;plate&quot;</span>: <span class="hljs-string">&quot;white&quot;</span>,<br>                  <span class="hljs-string">&quot;fork&quot;</span>: <span class="hljs-string">&quot;silver&quot;</span>,<br>                  <span class="hljs-string">&quot;tablecloth&quot;</span>: <span class="hljs-string">&quot;Orange&quot;</span><br>                  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
